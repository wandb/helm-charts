apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis
  namespace: default
spec:
  egress:
    - {}
  ingress:
    - ports:
        - port: 6379
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: anaconda2
    app.kubernetes.io/version: latest
    helm.sh/chart: anaconda2-0.11.2
  name: chartsnap-anaconda2
spec:
  maxUnavailable: 1
  selector:
    matchExpressions:
      - key: batch.kubernetes.io/job-name
        operator: DoesNotExist
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: anaconda2
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app
spec:
  maxUnavailable: 1
  selector:
    matchExpressions:
      - key: batch.kubernetes.io/job-name
        operator: DoesNotExist
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: app
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console
spec:
  maxUnavailable: 1
  selector:
    matchExpressions:
      - key: batch.kubernetes.io/job-name
        operator: DoesNotExist
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: console
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: parquet
    app.kubernetes.io/version: latest
    helm.sh/chart: parquet-0.11.2
  name: chartsnap-parquet
spec:
  maxUnavailable: 1
  selector:
    matchExpressions:
      - key: batch.kubernetes.io/job-name
        operator: DoesNotExist
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: parquet
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: weave
    app.kubernetes.io/version: latest
    helm.sh/chart: weave-0.11.2
  name: chartsnap-weave
spec:
  maxUnavailable: 1
  selector:
    matchExpressions:
      - key: batch.kubernetes.io/job-name
        operator: DoesNotExist
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: weave
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: anaconda2
    app.kubernetes.io/version: latest
    helm.sh/chart: anaconda2-0.11.2
  name: chartsnap-anaconda2
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: parquet
    app.kubernetes.io/version: latest
    helm.sh/chart: parquet-0.11.2
  name: chartsnap-parquet
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
  namespace: default
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-master
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: chartsnap
    meta.helm.sh/release-namespace: default
  labels:
    app: chartsnap-reloader
    app.kubernetes.io/managed-by: Helm
    chart: reloader-1.3.0
    heritage: Helm
    release: chartsnap
  name: chartsnap-reloader
  namespace: default
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: weave
    app.kubernetes.io/version: latest
    helm.sh/chart: weave-0.11.2
  name: chartsnap-weave
---
apiVersion: v1
data:
  ACCESS_KEY: bWluaW8=
  SECRET_KEY: dGVzdHBhc3N3b3Jk
kind: Secret
metadata:
  labels: null
  name: chartsnap-bucket
---
apiVersion: v1
data:
  CLICKHOUSE_PASSWORD: '###DYNAMIC_FIELD###'
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels: null
  name: chartsnap-clickhouse
---
apiVersion: v1
data:
  GORILLA_EMAIL_SINK: aHR0cHM6Ly9hcGkud2FuZGIuYWkvZW1haWwvZGlzcGF0Y2g=
  GORILLA_SLACK_CLIENT_ID: null
  GORILLA_SLACK_SECRET: null
  GORILLA_STATSIG_KEY: null
  SLACK_CLIENT_ID: null
  SLACK_SECRET: null
kind: Secret
metadata:
  labels: null
  name: chartsnap-global-secret
---
apiVersion: v1
data:
  KAFKA_CLIENT_PASSWORD: null
kind: Secret
metadata:
  labels: null
  name: chartsnap-kafka
---
apiVersion: v1
data:
  license: ""
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels: null
  name: chartsnap-license
---
apiVersion: v1
data:
  MYSQL_PASSWORD: '###DYNAMIC_FIELD###'
  MYSQL_ROOT_PASSWORD: '###DYNAMIC_FIELD###'
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels: null
  name: chartsnap-mysql
---
apiVersion: v1
data: {}
kind: Secret
metadata:
  labels: null
  name: chartsnap-parquet-secret
---
apiVersion: v1
data:
  REDIS_CA_CERT: null
  REDIS_PASSWORD: null
kind: Secret
metadata:
  labels: null
  name: chartsnap-redis-secret
---
apiVersion: v1
data:
  GORILLA_AUTH_JWK_URL: aHR0cDovL2NoYXJ0c25hcC1hcHA6ODA4My9hcGkvandrcy5qc29u
  GORILLA_SESSION_KEY: '###DYNAMIC_FIELD###'
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels: null
  name: chartsnap-gorilla-session-key
type: Opaque
---
apiVersion: v1
data:
  initdb.sql: |
    GRANT SESSION_VARIABLES_ADMIN,RELOAD,SELECT,LOCK TABLES ON *.* TO `wandb`@`%`;
  my.cnf: |
    [mysqld]
    binlog_format = 'ROW'
    innodb_online_alter_log_max_size = 268435456
    sync_binlog = 1
    innodb_flush_log_at_trx_commit = 1
    binlog_row_image = 'MINIMAL'
    local-infile = 1
    sort_buffer_size = 33554432
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: mysql-0.1.0
    wandb.com/app-name: mysql-0.1.0
  name: chartsnap-mysql-initdb
---
apiVersion: v1
data:
  config: |
    exporters:
      debug: {}
      debug/detailed:
        verbosity: detailed
      prometheus:
        endpoint: 0.0.0.0:9109
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    processors:
      batch: {}
      k8sattributes:
        extract:
          annotations:
          - from: pod
            key_regex: (.*)
            tag_name: $$1
          labels:
          - from: pod
            key_regex: (.*)
            tag_name: $$1
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    receivers:
      filelog:
        exclude: []
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: 2006-01-02T15:04:05.999999999Z07:00
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - combine_field: attributes.log
          combine_with: ""
          id: crio-recombine
          is_last_entry: attributes.logtag == 'F'
          max_log_size: 102400
          output: extract_metadata_from_filepath
          source_identifier: attributes["log.file.path"]
          type: recombine
        - id: parser-containerd
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - combine_field: attributes.log
          combine_with: ""
          id: containerd-recombine
          is_last_entry: attributes.logtag == 'F'
          max_log_size: 102400
          output: extract_metadata_from_filepath
          source_identifier: attributes["log.file.path"]
          type: recombine
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - from: attributes.log
          to: body
          type: move
        start_at: end
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu: null
          disk: null
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
          load: null
          memory: null
          network: null
      k8s_cluster:
        collection_interval: 10s
      k8sobjects:
        objects:
        - exclude_watch_type:
          - DELETED
          group: events.k8s.io
          mode: watch
          name: events
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 20s
        endpoint: https://${env:K8S_NODE_NAME}:10250
        insecure_skip_verify: true
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      statsd:
        endpoint: 0.0.0.0:8125
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          receivers:
          - filelog
        metrics:
          exporters:
          - debug
          - prometheus
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          receivers:
          - hostmetrics
          - k8s_cluster
          - kubeletstats
        traces:
          exporters:
          - debug
          processors:
          - batch
          - memory_limiter
          - k8sattributes
          receivers:
          - otlp
      telemetry:
        metrics:
          address: ${env:POD_IP}:8888
kind: ConfigMap
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
---
apiVersion: v1
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  allow-snippet-annotations: "false"
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - honor_labels: true
      job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
    - honor_labels: true
      job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - honor_labels: true
      job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: service
    - honor_labels: true
      job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
    - honor_labels: true
      job_name: kubernetes-pods-slow
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
      scrape_interval: 5m
      scrape_timeout: 30s
  recording_rules.yml: |
    {}
  rules: |
    {}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
  namespace: default
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-configuration
  namespace: default
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-health
  namespace: default
---
apiVersion: v1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-scripts
  namespace: default
---
apiVersion: v1
data:
  ANACONDA2_DISABLE_FILE_LOGGING: "true"
  DD_SERVICE: anaconda2
  PORT: "8082"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-anaconda2-configmap
---
apiVersion: v1
data:
  GORILLA_AUTH_METHOD: implicit
  GORILLA_FILE_METADATA_SOURCE_IS_INTERNAL: "true"
  GORILLA_FRONTEND_HOST: http://localhost:8080
  GORILLA_LICENSE_CERT_PATH: /jwks.json
  GORILLA_LIMITER: noop://
  GORILLA_PARQUET_ARROW_BUFFER_SIZE: "2147483648"
  GORILLA_PARQUET_PORT: "8087"
  GORILLA_PARQUET_RPC_PATH: /_goRPC_
  GORILLA_PORT: "8081"
  GORILLA_RUN_UPDATE_QUEUE_ADDR: internal://
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_NAME: wandb
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_PREFIX: wandb-overflow
  GORILLA_SCHEMA_FILE: /schema.graphql
  GORILLA_SESSION_LENGTH: 720h
  GORILLA_SWEEP_PROVIDER: http://chartsnap-anaconda2:8082
  GORILLA_TASK_QUEUE_WORKER_ENABLED: "false"
  GORILLA_USE_PARQUET_HISTORY_STORE: "true"
  GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE: /view-spec-updater-linux
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-api-configmap
---
apiVersion: v1
data:
  ANACONDA_ENABLED: "false"
  GORILLA_SWEEP_PROVIDER: http://chartsnap-anaconda2:8082
  LOGGING_ENABLED: "true"
  OPERATOR_ENABLED: "true"
  PARQUET_ENABLED: "true"
  PARQUET_HOST: http://chartsnap-parquet:8087
  WEAVE_ENABLED: "true"
  WEAVE_SERVICE: chartsnap-weave:9994
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-app-configmap
---
apiVersion: v1
data:
  AWS_REGION: us-east-1
  AWS_S3_KMS_ID: ""
  BUCKET_NAME: minio.minio.svc.cluster.local:9000/bucket
  BUCKET_PATH: ""
  GORILLA_DEFAULT_REGION: minio-local
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-bucket-configmap
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-ca-certs
---
apiVersion: v1
data:
  WF_CLICKHOUSE_DATABASE: weave_trace_db
  WF_CLICKHOUSE_HOST: chartsnap-clickhouse-headless
  WF_CLICKHOUSE_PORT: "8443"
  WF_CLICKHOUSE_REPLICATED: "false"
  WF_CLICKHOUSE_USER: default
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-clickhouse-configmap
---
apiVersion: v1
data:
  AUTH_SERVICE: chartsnap-app:8080
  BANNERS: '{}'
  BUCKET_ACCESS_IDENTITY: unknown
  OPERATOR_NAMESPACE: default
  PROMETHEUS_SERVER: http://chartsnap-prometheus-server
  RELEASE_NAME: chartsnap
  RELEASE_NAMESPACE: default
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-console-configmap
---
apiVersion: v1
data: {}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-executor-configmap
---
apiVersion: v1
data: {}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-filestream-configmap
---
apiVersion: v1
data:
  GORILLA_FILE_HOST: http://localhost:8080
  GORILLA_RUN_UPDATE_QUEUE_ADDR: internal://
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_NAME: wandb
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_PREFIX: wandb-overflow
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-flat-run-fields-updater-configmap
---
apiVersion: v1
data:
  OPERATOR_ENABLED: "true"
  REACT_APP_ANALYTICS_DISABLED: "true"
  REACT_APP_ENVIRONMENT_IS_PRIVATE: "true"
  REACT_APP_ENVIRONMENT_NAME: local
  REACT_APP_GIT_TAG: HEAD
  REACT_APP_HOST: http://localhost:8080
  SERVER_FLAG_WEAVE_1_PERCENTAGE: "100"
  WEAVE_ENABLED: "true"
  WEAVE_TRACES_ENABLED: "false"
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-frontend-configmap
---
apiVersion: v1
data:
  02_patch_env_js.sh: |
    #!/bin/bash
    function append_env_js() {
      local key=$1
      local value=$2
      local env_js_path="$BUILD_DIR/env.js"
      if [ -w "$env_js_path" ]; then
        printf "Object.assign(window.CONFIG, {%s: %s});\n" "$key" "$value" >> "$env_js_path"
      fi
    }
    function extract_server_flags() {
      # This function builds a javascript string that gets appended to env.js
      # it defines a SERVER_FLAGS object maping env vars which start with "SERVER_FLAG_"
      # where each key is the rest of that env var name and the value is that as a string.
      local env_js_path="$BUILD_DIR/env.js"
      local new_js=""
      # define the object and open it with '{ '
      # pad with a <space> incase no server flags are set
      printf -v new_js "const SERVER_FLAGS = { "
      for name in "${!SERVER_FLAG_@}"; do
        # append the to the new_js bash variable the key/value pair
        printf -v new_js '%s"%s": "%s",' "${new_js}" "${name:12}" "${!name}"
      done
      # remove the trailing comma and close the object
      local length="${#new_js}"-1
      printf "${new_js:0:length}};\n" >> "$env_js_path"
      append_env_js "SERVER_FLAGS" "SERVER_FLAGS"
     }
    function known_additional_flags() {
      if [ "$CI" == "1" ]; then
        append_env_js "CI" "true"
        echo "WARN: use REACT_APP_CI instead"
      fi
      if [ "$(echo "$DISABLE_TELEMETRY" | tr '[:lower:]')" == "true" ]; then
        append_env_js "DISABLE_TELEMETRY" "true"
        echo "WARN: use REACT_APP_DISABLE_TELEMETRY instead"
      fi
      if [ "$WEAVE_ENABLED" == "true" ]; then
        echo "WARN: use REACT_APP_WEAVE_BACKEND_HOST instead"
        append_env_js "WEAVE_BACKEND_HOST" \"/__weave\"
      fi
      if [ "$WEAVE_TRACES_ENABLED" == "true" ]; then
        append_env_js "TRACE_BACKEND_BASE_URL" \"/traces\"
      fi
      if [ "$ENABLE_RBAC_UI" == "true" ]; then
        append_env_js "ENABLE_RBAC_UI" "true"
      fi
      if [ "$OPERATOR_ENABLED" = "true" ]; then
        append_env_js "OPERATOR_ENABLED" "true"
      fi
      # GORILLA_CUSTOMER_SECRET_STORE_SOURCE is populated by terraform in the global secrets map
      # which determines ENABLE_SECRET_STORE
      if [[ -n "$GORILLA_CUSTOMER_SECRET_STORE_SOURCE" && "$GORILLA_CUSTOMER_SECRET_STORE_SOURCE" != "noop://" ]]; then
        append_env_js "ENABLE_SECRET_STORE" "true"
      fi
      if [ -n "$BANNERS" ]; then
        append_env_js "BANNERS" "$BANNERS"
      else
        append_env_js "BANNERS" "{}"
      fi
      if [ "$ENABLE_REGISTRY_UI" == "true" ]; then
        append_env_js "ENABLE_REGISTRY_UI" "true"
      fi
    }

    function main() {
      # Server flag templating
      if ! grep -q 'const SERVER_FLAGS =' "$BUILD_DIR/env.js"; then
        extract_server_flags
        known_additional_flags
      else
        echo "WARN: Server Flag already completed."
      fi
    }
    main "$@"
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-frontend-patch-env-js
---
apiVersion: v1
data:
  GORILLA_LICENSE_CERT_PATH: /jwks.json
  GORILLA_ONPREM: "true"
  GORILLA_STATSD_PORT: "8125"
  GORILLA_TSHIRT_SIZE: testing
  ONPREM: "true"
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-global-configmap
---
apiVersion: v1
data:
  GORILLA_ARTIFACTS_GC_BATCH_SIZE: "0"
  GORILLA_ARTIFACTS_GC_DELETE_FILES_NUM_WORKERS: "0"
  GORILLA_ARTIFACTS_GC_NUM_WORKERS: "0"
  GORILLA_GLUE_ACTIVITY_STORE_BACKFILL_ENABLE: "true"
  GORILLA_GLUE_ACTIVITY_STORE_ENABLE: "true"
  GORILLA_GLUE_ACTIVITY_STORE_SERVE: "true"
  GORILLA_GLUE_ARTIFACT_GC_ENABLED: "false"
  GORILLA_GLUE_CLEAR_TASK_DEDUPE_KEY_ENABLED: "false"
  GORILLA_GLUE_CLICKHOUSE_ADDRESS: http://$(WF_CLICKHOUSE_HOST):$(WF_CLICKHOUSE_PORT)
  GORILLA_GLUE_COLLECT_AUDIT_LOGS: "true"
  GORILLA_GLUE_CONTAINER_PORT: "8080"
  GORILLA_GLUE_DEFAULT_REGION: minio-local
  GORILLA_GLUE_DEV: "false"
  GORILLA_GLUE_DISABLE_TELEMETRY: "true"
  GORILLA_GLUE_FILE_STORE_IS_PROXIED: "false"
  GORILLA_GLUE_FRONTEND_HOST: http://localhost:8080
  GORILLA_GLUE_LICENSE_CERT_PATH: /jwks.json
  GORILLA_GLUE_SESSION_LENGTH: 720h
  GORILLA_GLUE_SWEEP_PROVIDER: http://chartsnap-anaconda2:8082
  GORILLA_GLUE_TASK_CONFIG_PATH: /gorilla_glue_tasks_local.yaml
  GORILLA_GLUE_TASK_PROVIDER: memory://
  GORILLA_GLUE_TASK_QUEUE_WORKER_ENABLED: "false"
  GORILLA_GLUE_TASK_STORE: memory://
  GORILLA_GLUE_USE_PARQUET_HISTORY_STORE: "true"
  GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE: /view-spec-updater-linux
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-glue-configmap
---
apiVersion: v1
data:
  KAFKA_BROKER_HOST: ""
  KAFKA_BROKER_PORT: "9092"
  KAFKA_CLIENT_USER: ""
  KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS: "100"
  KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE: chartsnap-run-updates-shadow
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-kafka-configmap
---
apiVersion: v1
data:
  GLUE_ENABLED: "true"
  GORILLA_GLUE_CONTAINER_PORT: "9173"
  HOST: http://localhost:8080
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-local-configmap
---
apiVersion: v1
data:
  MYSQL_DATABASE: wandb_local
  MYSQL_HOST: chartsnap-mysql
  MYSQL_PORT: "3306"
  MYSQL_USER: wandb
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-mysql-configmap
---
apiVersion: v1
data:
  GORILLA_COLLECT_AUDIT_LOGS: "true"
  GORILLA_PARQUET_ARROW_BUFFER_SIZE: "2147483648"
  GORILLA_PARQUET_PORT: "8087"
  GORILLA_PARQUET_RPC_PATH: /_goRPC_
  GORILLA_TASK_QUEUE_WORKER_ENABLED: "false"
  GORILLA_USE_PARQUET_HISTORY_STORE: "true"
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-parquet-configmap
---
apiVersion: v1
data:
  REDIS_HOST: chartsnap-redis-master
  REDIS_PARAMS: ?ttlInSeconds=604800
  REDIS_PORT: "6379"
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-redis-configmap
---
apiVersion: v1
data:
  API_PATH_PREFIX: /traces
  KAFKA_BROKER_HOST: bufstream.bufstream.svc.cluster.local
  KAFKA_BROKER_PORT: "9092"
  PORT: "8080"
  WANDB_BASE_URL: http://chartsnap-app:8080/
  WANDB_INTERNAL_SERVICE_TOKEN_SECRET_NAME: weave-worker-auth
  WANDB_PUBLIC_BASE_URL: http://localhost:8080
  WEAVE_ENABLE_ONLINE_EVAL: "false"
  WEAVE_TRACE_SERVER_BASE_URL: http://localhost:8080/traces
  WF_ENFORCE_PASSWORD_LENGTH: "false"
  WF_TRACE_SERVER_URL: http://localhost:8080/traces
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-weave-trace-configmap
---
apiVersion: v1
data:
  GORILLA_ONPREM: "true"
  PORT: "9994"
  WANDB_BASE_URL: http://chartsnap-app:8080/
  WANDB_PUBLIC_BASE_URL: http://localhost:8080
  WEAVE_CACHE_CLEAR_INTERVAL: "24"
  WEAVE_LOCAL_ARTIFACT_DIR: /vol/weave/cache
  WEAVE_LOG_FORMAT: json
  WEAVE_SERVER_NUM_WORKERS: "4"
  WEAVE_SERVER_URL: http://127.0.0.1:9994
kind: ConfigMap
metadata:
  labels: null
  name: chartsnap-weave-configmap
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: mysql-0.1.0
    wandb.com/app-name: mysql-0.1.0
  name: chartsnap-mysql-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - patch
      - create
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - pods/log
      - configmaps
      - services
      - serviceaccounts
      - events
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - statefulsets
      - daemonsets
      - replicasets
      - controllerrevisions
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments/status
      - statefulsets/status
      - daemonsets/status
      - replicasets/status
    verbs:
      - get
  - apiGroups:
      - apps.wandb.com
    resources:
      - weightsandbiases
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - namespaces
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/spec
      - pods
      - pods/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/stats
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - events.k8s.io
    resources:
      - events
    verbs:
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chartsnap-console
subjects:
  - kind: ServiceAccount
    name: chartsnap-console
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chartsnap-otel-daemonset
subjects:
  - kind: ServiceAccount
    name: chartsnap-otel-daemonset
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chartsnap-prometheus-server
subjects:
  - kind: ServiceAccount
    name: chartsnap-prometheus-server
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: chartsnap
    meta.helm.sh/release-namespace: default
  labels:
    app: chartsnap-reloader
    app.kubernetes.io/managed-by: Helm
    chart: reloader-1.3.0
    heritage: Helm
    release: chartsnap
  name: chartsnap-reloader-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - statefulsets
    verbs:
      - list
      - get
      - update
      - patch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - list
      - get
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
      - delete
      - list
      - get
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chartsnap-app
subjects:
  - kind: ServiceAccount
    name: chartsnap-app
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: chartsnap
    meta.helm.sh/release-namespace: default
  labels:
    app: chartsnap-reloader
    app.kubernetes.io/managed-by: Helm
    chart: reloader-1.3.0
    heritage: Helm
    release: chartsnap
  name: chartsnap-reloader-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chartsnap-reloader-role
subjects:
  - kind: ServiceAccount
    name: chartsnap-reloader
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: anaconda2
    app.kubernetes.io/version: latest
    helm.sh/chart: anaconda2-0.11.2
  name: chartsnap-anaconda2
spec:
  ports:
    - name: http
      port: 8082
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: anaconda2
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app
spec:
  ports:
    - name: app
      port: 8080
      protocol: TCP
    - name: prometheus
      port: 8181
      protocol: TCP
    - name: anaconda
      port: 8082
      protocol: TCP
    - name: local
      port: 8083
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console
spec:
  ports:
    - name: console
      port: 8082
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: console
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: mysql-0.1.0
    wandb.com/app-name: mysql-0.1.0
  name: chartsnap-mysql
spec:
  ports:
    - port: 3306
      protocol: TCP
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: mysql-0.1.0
    wandb.com/app-name: mysql-0.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9109"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
spec:
  ports:
    - name: otel-exporter
      port: 9109
      protocol: TCP
    - name: statsd
      port: 8125
      protocol: TCP
    - name: otlp-grpc
      port: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  type: null
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: parquet
    app.kubernetes.io/version: latest
    helm.sh/chart: parquet-0.11.2
  name: chartsnap-parquet
spec:
  ports:
    - name: parquet
      port: 8087
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: parquet
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
  namespace: default
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: prometheus
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9104"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus-mysql-exporter
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: mysql-exporter-0.1.0
    wandb.com/app-name: mysql-exporter-0.1.0
  name: chartsnap-prometheus-mysql-exporter
spec:
  ports:
    - name: mysql-exporter
      port: 9104
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus-mysql-exporter
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: mysql-exporter-0.1.0
    wandb.com/app-name: mysql-exporter-0.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus-redis-exporter
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: redis-exporter-0.1.0
    wandb.com/app-name: redis-exporter-0.1.0
  name: chartsnap-prometheus-redis-exporter
spec:
  ports:
    - name: redis-exporter
      port: 9121
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus-redis-exporter
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: redis-exporter-0.1.0
    wandb.com/app-name: redis-exporter-0.1.0
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-headless
  namespace: default
spec:
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: redis
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-master
  namespace: default
spec:
  internalTrafficPolicy: Cluster
  ports:
    - name: tcp-redis
      nodePort: null
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: redis
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: weave
    app.kubernetes.io/version: latest
    helm.sh/chart: weave-0.11.2
  name: chartsnap-weave
spec:
  ports:
    - name: weave
      port: 9994
      protocol: TCP
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: weave
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/version: 0.33.0
    helm.sh/chart: daemonset-0.1.0
    wandb.com/app-name: daemonset-0.1.0
  name: chartsnap-otel-daemonset
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: daemonset
      app.kubernetes.io/version: 0.33.0
      helm.sh/chart: daemonset-0.1.0
      wandb.com/app-name: daemonset-0.1.0
  template:
    metadata:
      annotations:
        checksum/configmap: fc14657abee2d90189e7f15a05344616103962018473696c62050e52dd81935
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: daemonset
        app.kubernetes.io/version: 0.33.0
        helm.sh/chart: daemonset-0.1.0
        wandb.com/app-name: daemonset-0.1.0
    spec:
      containers:
        - command:
            - /otelcol-contrib
            - --config=/conf/config.yaml
          env:
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_HOST
              value: chartsnap-mysql
            - name: MYSQL_DATABASE
              value: wandb_local
            - name: MYSQL_USER
              value: wandb
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: chartsnap-mysql
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: otel/opentelemetry-collector-contrib:0.97.0
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          name: daemonset
          ports:
            - containerPort: 4317
              hostPort: 4317
              name: otlp
              protocol: TCP
            - containerPort: 4318
              hostPort: 4318
              name: otlp-http
              protocol: TCP
            - containerPort: 9109
              hostPort: 9109
              name: prometheus
              protocol: TCP
            - containerPort: 8125
              hostPort: 8125
              name: statsd
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              cpu: 1000m
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: null
            privileged: false
            readOnlyRootFilesystem: false
          volumeMounts:
            - mountPath: /conf
              name: config
            - mountPath: /var/log/pods
              name: varlogpods
              readOnly: true
            - mountPath: /var/lib/docker/containers
              name: varlibdockercontainers
              readOnly: true
            - mountPath: /hostfs
              mountPropagation: HostToContainer
              name: hostfs
              readOnly: true
      hostNetwork: false
      priorityClassName: wandb-global-priority
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: chartsnap-otel-daemonset
      volumes:
        - hostPath:
            path: /
          name: hostfs
        - hostPath:
            path: /var/log/pods
          name: varlogpods
        - configMap:
            items:
              - key: config
                path: config.yaml
            name: chartsnap-otel-daemonset
          name: config
        - hostPath:
            path: /var/lib/docker/containers
          name: varlibdockercontainers
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: anaconda2
    app.kubernetes.io/version: latest
    helm.sh/chart: anaconda2-0.11.2
  name: chartsnap-anaconda2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: anaconda2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: anaconda2
        app.kubernetes.io/version: latest
        helm.sh/chart: anaconda2-0.11.2
    spec:
      containers:
        - env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_TRACE_AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom:
            - configMapRef:
                name: chartsnap-anaconda2-configmap
          image: wandb/anaconda2:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /ping
              port: http
            timeoutSeconds: 2
          name: anaconda2
          ports:
            - containerPort: 8082
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ping
              port: http
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
      priorityClassName: wandb-global-priority
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-anaconda2
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: anaconda2
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: anaconda2
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: app
    app.kubernetes.io/version: latest
    helm.sh/chart: app-0.11.2
  name: chartsnap-app-bc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: app
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: app
        app.kubernetes.io/version: latest
        helm.sh/chart: app-0.11.2
    spec:
      containers:
        - env:
            - name: G_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
                  name: gorilla-coreweave-caios
                  optional: true
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
                  name: gorilla-coreweave-caios
                  optional: true
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: SECRET_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_FILE_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: chartsnap-mysql
            - name: MYSQL
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_ANALYTICS_SINK
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_METADATA_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_USAGE_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: chartsnap-redis-secret
                  optional: true
            - name: REDIS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_AUDITOR_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_FILE_METADATA_SOURCE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_LOCKER
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_METADATA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_SETTINGS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_USAGE_METRICS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_TASK_QUEUE
              value: noop://
            - name: KAFKA_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KAFKA_CLIENT_PASSWORD
                  name: chartsnap-kafka
                  optional: true
            - name: GORILLA_FILE_STREAM_STORE_ADDRESS
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
              value: kafka://$(KAFKA_CLIENT_USER):$(KAFKA_CLIENT_PASSWORD)@$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)
            - name: GORILLA_HISTORY_STORE
              value: http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
              value: ""
            - name: GORILLA_STATSIG_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_STATSIG_KEY
                  name: gorilla-statsig
                  optional: true
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: GORILLA_LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: BUCKET_QUEUE
              value: internal://
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_COREWEAVE_OBSERVABILITY_API_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_OBSERVABILITY_API_KEY
                  name: gorilla-coreweave-observability
                  optional: true
            - name: GORILLA_GLUE_CONTAINER_PORT
              value: "8083"
            - name: GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE
              value: /usr/local/bin/view-spec-updater-linux
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
            - name: GORILLA_LICENSE_CERT_PATH
              value: /var/app/jwks.json
            - name: GORILLA_STORAGE_BUCKET
              value: s3://local-files
            - name: GORILLA_TASK_CONFIG_PATH
              value: /etc/service/gorilla-glue/glue_tasks_local.yaml
            - name: GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE
              value: /usr/local/bin/view-spec-updater-linux
          envFrom:
            - configMapRef:
                name: chartsnap-api-configmap
            - configMapRef:
                name: chartsnap-app-configmap
            - configMapRef:
                name: chartsnap-bucket-configmap
            - configMapRef:
                name: chartsnap-frontend-configmap
            - configMapRef:
                name: chartsnap-global-configmap
            - secretRef:
                name: chartsnap-global-secret
            - configMapRef:
                name: chartsnap-glue-configmap
            - secretRef:
                name: chartsnap-gorilla-session-key
            - configMapRef:
                name: chartsnap-kafka-configmap
            - configMapRef:
                name: chartsnap-local-configmap
            - configMapRef:
                name: chartsnap-mysql-configmap
            - configMapRef:
                name: chartsnap-redis-configmap
          image: wandb/local:latest
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - sleep
                  - "25"
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          name: app
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8181
              name: prometheus
              protocol: TCP
            - containerPort: 8082
              name: anaconda
              protocol: TCP
            - containerPort: 8083
              name: local
              protocol: TCP
            - containerPort: 8125
              name: gorilla-statsd
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          startupProbe:
            failureThreshold: 120
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
          volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/inline
              name: wandb-ca-certs
            - mountPath: /usr/local/share/ca-certificates/configmap
              name: wandb-ca-certs-user
            - mountPath: /etc/ssl/certs/redis_ca.pem
              name: redis-ca
              subPath: redis_ca.pem
      initContainers:
        - command:
            - bash
            - -c
            - until mysql -h$MYSQL_HOST -u$MYSQL_USER -p"$(python -c "import sys; from urllib import parse; print(parse.unquote_plus(sys.argv[1]))" $MYSQL_PASSWORD)" -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done
          env:
            - name: G_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
                  name: gorilla-coreweave-caios
                  optional: true
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
                  name: gorilla-coreweave-caios
                  optional: true
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: SECRET_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_FILE_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: chartsnap-mysql
            - name: MYSQL
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_ANALYTICS_SINK
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_METADATA_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_USAGE_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: chartsnap-redis-secret
                  optional: true
            - name: REDIS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_AUDITOR_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_FILE_METADATA_SOURCE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_LOCKER
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_METADATA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_SETTINGS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_USAGE_METRICS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_TASK_QUEUE
              value: noop://
            - name: KAFKA_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KAFKA_CLIENT_PASSWORD
                  name: chartsnap-kafka
                  optional: true
            - name: GORILLA_FILE_STREAM_STORE_ADDRESS
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
              value: kafka://$(KAFKA_CLIENT_USER):$(KAFKA_CLIENT_PASSWORD)@$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)
            - name: GORILLA_HISTORY_STORE
              value: http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
              value: ""
            - name: GORILLA_STATSIG_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_STATSIG_KEY
                  name: gorilla-statsig
                  optional: true
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: GORILLA_LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: BUCKET_QUEUE
              value: internal://
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_COREWEAVE_OBSERVABILITY_API_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_OBSERVABILITY_API_KEY
                  name: gorilla-coreweave-observability
                  optional: true
            - name: GORILLA_GLUE_CONTAINER_PORT
              value: "8083"
            - name: GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE
              value: /usr/local/bin/view-spec-updater-linux
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
            - name: GORILLA_LICENSE_CERT_PATH
              value: /var/app/jwks.json
            - name: GORILLA_STORAGE_BUCKET
              value: s3://local-files
            - name: GORILLA_TASK_CONFIG_PATH
              value: /etc/service/gorilla-glue/glue_tasks_local.yaml
            - name: GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE
              value: /usr/local/bin/view-spec-updater-linux
          envFrom:
            - configMapRef:
                name: chartsnap-api-configmap
            - configMapRef:
                name: chartsnap-app-configmap
            - configMapRef:
                name: chartsnap-bucket-configmap
            - configMapRef:
                name: chartsnap-frontend-configmap
            - configMapRef:
                name: chartsnap-global-configmap
            - secretRef:
                name: chartsnap-global-secret
            - configMapRef:
                name: chartsnap-glue-configmap
            - secretRef:
                name: chartsnap-gorilla-session-key
            - configMapRef:
                name: chartsnap-kafka-configmap
            - configMapRef:
                name: chartsnap-local-configmap
            - configMapRef:
                name: chartsnap-mysql-configmap
            - configMapRef:
                name: chartsnap-redis-configmap
          image: wandb/local:latest
          imagePullPolicy: null
          name: init-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
      priorityClassName: wandb-global-priority
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-app
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: app
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: app
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            name: chartsnap-ca-certs
          name: wandb-ca-certs
        - configMap:
            name: noCertProvided
            optional: true
          name: wandb-ca-certs-user
        - name: redis-ca
          secret:
            items:
              - key: REDIS_CA_CERT
                path: redis_ca.pem
            optional: true
            secretName: chartsnap-redis-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: console
    app.kubernetes.io/version: latest
    helm.sh/chart: console-0.11.2
  name: chartsnap-console-bc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: console
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: console
        app.kubernetes.io/version: latest
        helm.sh/chart: console-0.11.2
    spec:
      containers:
        - env:
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom:
            - configMapRef:
                name: chartsnap-console-configmap
          image: wandb/console:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /console/api/healthz
              port: http
          name: console
          ports:
            - containerPort: 8082
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /console/api/ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          startupProbe:
            failureThreshold: 120
            httpGet:
              path: /console/api/ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
      priorityClassName: wandb-console-priority
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-console
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: console
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: console
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: parquet
    app.kubernetes.io/version: latest
    helm.sh/chart: parquet-0.11.2
  name: chartsnap-parquet-bc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: parquet
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: parquet
        app.kubernetes.io/version: latest
        helm.sh/chart: parquet-0.11.2
    spec:
      containers:
        - args:
            - parquet
          env:
            - name: G_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
                  name: gorilla-coreweave-caios
                  optional: true
            - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
                  name: gorilla-coreweave-caios
                  optional: true
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: ACCESS_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: SECRET_KEY
                  name: chartsnap-bucket
                  optional: true
            - name: BUCKET
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_FILE_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: GORILLA_STORAGE_BUCKET
              value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: chartsnap-mysql
            - name: MYSQL
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_ANALYTICS_SINK
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_METADATA_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_USAGE_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: chartsnap-redis-secret
                  optional: true
            - name: REDIS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_AUDITOR_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_FILE_METADATA_SOURCE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_LOCKER
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_METADATA_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_SETTINGS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_USAGE_METRICS_CACHE
              value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
            - name: GORILLA_TASK_QUEUE
              value: noop://
            - name: KAFKA_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KAFKA_CLIENT_PASSWORD
                  name: chartsnap-kafka
                  optional: true
            - name: GORILLA_FILE_STREAM_STORE_ADDRESS
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
              value: kafka://$(KAFKA_CLIENT_USER):$(KAFKA_CLIENT_PASSWORD)@$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)
            - name: GORILLA_HISTORY_STORE
              value: http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
              value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
            - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
              value: ""
            - name: GORILLA_STATSIG_KEY
              valueFrom:
                secretKeyRef:
                  key: GORILLA_STATSIG_KEY
                  name: gorilla-statsig
                  optional: true
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: GORILLA_LICENSE
              valueFrom:
                secretKeyRef:
                  key: license
                  name: chartsnap-license
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom:
            - configMapRef:
                name: chartsnap-bucket-configmap
            - configMapRef:
                name: chartsnap-global-configmap
            - secretRef:
                name: chartsnap-global-secret
            - configMapRef:
                name: chartsnap-kafka-configmap
            - configMapRef:
                name: chartsnap-mysql-configmap
            - configMapRef:
                name: chartsnap-parquet-configmap
            - configMapRef:
                name: chartsnap-redis-configmap
          image: wandb/megabinary:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8087
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          name: parquet
          ports:
            - containerPort: 8087
              name: parquet
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8087
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/inline
              name: wandb-ca-certs
            - mountPath: /usr/local/share/ca-certificates/configmap
              name: wandb-ca-certs-user
            - mountPath: /etc/ssl/certs/redis_ca.pem
              name: redis-ca
              subPath: redis_ca.pem
      priorityClassName: wandb-data-priority
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-parquet
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: parquet
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: parquet
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            name: chartsnap-ca-certs
          name: wandb-ca-certs
        - configMap:
            name: noCertProvided
            optional: true
          name: wandb-ca-certs-user
        - name: redis-ca
          secret:
            items:
              - key: REDIS_CA_CERT
                path: redis_ca.pem
            optional: true
            secretName: chartsnap-redis-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: prometheus
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
  name: chartsnap-prometheus-server
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: prometheus
  strategy:
    rollingUpdate: null
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/part-of: prometheus
        app.kubernetes.io/version: v2.47.0
        helm.sh/chart: instance-24.5.0
    spec:
      containers:
        - args:
            - --watched-dir=/etc/config
            - --reload-url=http://127.0.0.1:9090/-/reload
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.67.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
              readOnly: true
        - args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          image: quay.io/prometheus/prometheus:v2.47.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-server
          ports:
            - containerPort: 9090
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          resources: {}
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
            - mountPath: /data
              name: storage-volume
              subPath: ""
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: chartsnap-prometheus-server
      terminationGracePeriodSeconds: 300
      volumes:
        - configMap:
            name: chartsnap-prometheus-server
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: chartsnap-prometheus-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: chartsnap
    meta.helm.sh/release-namespace: default
  labels:
    app: chartsnap-reloader
    app.kubernetes.io/managed-by: Helm
    chart: reloader-1.3.0
    group: com.stakater.platform
    heritage: Helm
    provider: stakater
    release: chartsnap
    version: v1.3.0
  name: chartsnap-reloader
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: chartsnap-reloader
      release: chartsnap
  template:
    metadata:
      labels:
        app: chartsnap-reloader
        app.kubernetes.io/managed-by: Helm
        chart: reloader-1.3.0
        group: com.stakater.platform
        heritage: Helm
        provider: stakater
        release: chartsnap
        version: v1.3.0
    spec:
      containers:
        - args:
            - --log-level=info
            - --reload-on-create=true
          env:
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  divisor: "1"
                  resource: limits.cpu
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  divisor: "1"
                  resource: limits.memory
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: ghcr.io/stakater/reloader:v1.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: chartsnap-reloader
          ports:
            - containerPort: 9090
              name: http
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-reloader
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: weave
    app.kubernetes.io/version: latest
    helm.sh/chart: weave-0.11.2
  name: chartsnap-weave-bc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: weave
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: weave
        app.kubernetes.io/version: latest
        helm.sh/chart: weave-0.11.2
    spec:
      containers:
        - env:
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom:
            - configMapRef:
                name: chartsnap-weave-configmap
          image: wandb/weave-python:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /__weave/hello
              port: http
          name: weave
          ports:
            - containerPort: 9994
              name: http
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /__weave/hello
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: /__weave/hello
              port: http
            periodSeconds: 10
          volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/inline
              name: wandb-ca-certs
            - mountPath: /usr/local/share/ca-certificates/configmap
              name: wandb-ca-certs-user
            - mountPath: /etc/ssl/certs/redis_ca.pem
              name: redis-ca
              subPath: redis_ca.pem
            - mountPath: /vol/weave/cache
              name: cache
        - command:
            - python
            - weave-public/weave_query/scripts/clear_cache.py
          env:
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom:
            - configMapRef:
                name: chartsnap-weave-configmap
          image: wandb/weave-python:latest
          imagePullPolicy: IfNotPresent
          name: weave-cache-clear
          resources:
            limits:
              cpu: 4
              memory: 12Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          volumeMounts:
            - mountPath: /vol/weave/cache
              name: cache
      priorityClassName: wandb-global-priority
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-weave
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: weave
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: weave
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            name: chartsnap-ca-certs
          name: wandb-ca-certs
        - configMap:
            name: noCertProvided
            optional: true
          name: wandb-ca-certs-user
        - name: redis-ca
          secret:
            items:
              - key: REDIS_CA_CERT
                path: redis_ca.pem
            optional: true
            secretName: chartsnap-redis-secret
        - emptyDir:
            medium: ""
            sizeLimit: 20Gi
          name: cache
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: mysql-0.1.0
    wandb.com/app-name: mysql-0.1.0
  name: chartsnap-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 1.16.0
      helm.sh/chart: mysql-0.1.0
      wandb.com/app-name: mysql-0.1.0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 1.16.0
        helm.sh/chart: mysql-0.1.0
        wandb.com/app-name: mysql-0.1.0
    spec:
      containers:
        - env:
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_HOST
              value: chartsnap-mysql
            - name: MYSQL_DATABASE
              value: wandb_local
            - name: MYSQL_USER
              value: wandb
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: chartsnap-mysql
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: chartsnap-mysql
          image: mysql:latest
          livenessProbe:
            tcpSocket:
              port: 3306
          name: mysql
          ports:
            - containerPort: 3306
              name: mysql
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 3306
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
          startupProbe:
            failureThreshold: 60
            initialDelaySeconds: 20
            periodSeconds: 5
            tcpSocket:
              port: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data
            - mountPath: /docker-entrypoint-initdb.d/initdb.sql
              name: initdb
              subPath: initdb.sql
            - mountPath: /etc/mysql/my.cnf
              name: initdb
              subPath: my.cnf
      priorityClassName: wandb-database-priority
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
      volumes:
        - configMap:
            name: chartsnap-mysql-initdb
          name: initdb
        - name: data
          persistentVolumeClaim:
            claimName: chartsnap-mysql-data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
  name: chartsnap-redis-master
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: redis
  serviceName: chartsnap-redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.19.4
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: master
                    app.kubernetes.io/instance: chartsnap
                    app.kubernetes.io/name: redis
                topologyKey: kubernetes.io/hostname
              weight: 1
      automountServiceAccountToken: false
      containers:
        - args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          command:
            - /bin/bash
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          image: docker.io/bitnamilegacy/redis:7.2.4-debian-12-r9
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 6
          name: redis
          ports:
            - containerPort: 6379
              name: redis
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /opt/bitnami/scripts/start-scripts
              name: start-scripts
            - mountPath: /health
              name: health
            - mountPath: /data
              name: redis-data
            - mountPath: /opt/bitnami/redis/mounted-etc
              name: config
            - mountPath: /opt/bitnami/redis/etc/
              name: empty-dir
              subPath: app-conf-dir
            - mountPath: /tmp
              name: empty-dir
              subPath: tmp-dir
      enableServiceLinks: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: chartsnap-redis-master
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 493
            name: chartsnap-redis-scripts
          name: start-scripts
        - configMap:
            defaultMode: 493
            name: chartsnap-redis-health
          name: health
        - configMap:
            name: chartsnap-redis-configuration
          name: config
        - emptyDir: {}
          name: empty-dir
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app.kubernetes.io/component: master
          app.kubernetes.io/instance: chartsnap
          app.kubernetes.io/name: redis
        name: redis-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: parquet
    app.kubernetes.io/version: latest
    helm.sh/chart: parquet-0.11.2
  name: chartsnap-parquet-backfill
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: parquet
            app.kubernetes.io/version: latest
            helm.sh/chart: parquet-0.11.2
        spec:
          containers:
            - args:
                - glue
              env:
                - name: G_HOST_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: GOMEMLIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.memory
                - name: GOMAXPROCS
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.cpu
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
                  valueFrom:
                    secretKeyRef:
                      key: GORILLA_COREWEAVE_WANDB_INTEGRATION_ACCESS_ID
                      name: gorilla-coreweave-caios
                      optional: true
                - name: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: GORILLA_COREWEAVE_WANDB_INTEGRATION_SECRET_KEY
                      name: gorilla-coreweave-caios
                      optional: true
                - name: AZURE_STORAGE_KEY
                  valueFrom:
                    secretKeyRef:
                      key: ACCESS_KEY
                      name: chartsnap-bucket
                      optional: true
                - name: BUCKET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: ACCESS_KEY
                      name: chartsnap-bucket
                      optional: true
                - name: BUCKET_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: SECRET_KEY
                      name: chartsnap-bucket
                      optional: true
                - name: BUCKET
                  value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
                - name: GORILLA_FILE_STORE
                  value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
                - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
                  value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
                - name: GORILLA_STORAGE_BUCKET
                  value: s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: MYSQL_PASSWORD
                      name: chartsnap-mysql
                - name: MYSQL
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_ANALYTICS_SINK
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_METADATA_STORE
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_RUN_STORE
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_USAGE_STORE
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: REDIS_PASSWORD
                      name: chartsnap-redis-secret
                      optional: true
                - name: REDIS
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_AUDITOR_CACHE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_CACHE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_FILE_METADATA_SOURCE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_LOCKER
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_METADATA_CACHE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_SETTINGS_CACHE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_USAGE_METRICS_CACHE
                  value: redis://$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)
                - name: GORILLA_TASK_QUEUE
                  value: noop://
                - name: KAFKA_CLIENT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: KAFKA_CLIENT_PASSWORD
                      name: chartsnap-kafka
                      optional: true
                - name: GORILLA_FILE_STREAM_STORE_ADDRESS
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
                  value: kafka://$(KAFKA_CLIENT_USER):$(KAFKA_CLIENT_PASSWORD)@$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)
                - name: GORILLA_HISTORY_STORE
                  value: http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
                  value: mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred
                - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
                  value: ""
                - name: GORILLA_STATSIG_KEY
                  valueFrom:
                    secretKeyRef:
                      key: GORILLA_STATSIG_KEY
                      name: gorilla-statsig
                      optional: true
                - name: LICENSE
                  valueFrom:
                    secretKeyRef:
                      key: license
                      name: chartsnap-license
                - name: GORILLA_LICENSE
                  valueFrom:
                    secretKeyRef:
                      key: license
                      name: chartsnap-license
                - name: GLOBAL_ADMIN_API_KEY
                  value: local-123456789-123456789-123456789-1234
                - name: GORILLA_GLUE_EXECUTE
                  value: "true"
                - name: GORILLA_GLUE_EXECUTE_TASK_NAME
                  value: EXPORTHISTORYTOPARQUET
                - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
                  value: "true"
              envFrom:
                - configMapRef:
                    name: chartsnap-bucket-configmap
                - configMapRef:
                    name: chartsnap-global-configmap
                - secretRef:
                    name: chartsnap-global-secret
                - configMapRef:
                    name: chartsnap-glue-configmap
                - configMapRef:
                    name: chartsnap-kafka-configmap
                - configMapRef:
                    name: chartsnap-mysql-configmap
                - configMapRef:
                    name: chartsnap-parquet-configmap
                - configMapRef:
                    name: chartsnap-redis-configmap
              image: wandb/megabinary:latest
              imagePullPolicy: IfNotPresent
              name: backfill-job
              resources:
                limits:
                  cpu: 1
                  memory: 1Gi
                requests:
                  cpu: 1
                  memory: 1Gi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add: []
                  drop: []
                privileged: false
                readOnlyRootFilesystem: false
              volumeMounts:
                - mountPath: /usr/local/share/ca-certificates/inline
                  name: wandb-ca-certs
                - mountPath: /usr/local/share/ca-certificates/configmap
                  name: wandb-ca-certs-user
                - mountPath: /etc/ssl/certs/redis_ca.pem
                  name: redis-ca
                  subPath: redis_ca.pem
          priorityClassName: wandb-data-priority
          restartPolicy: Never
          securityContext:
            fsGroup: 0
            fsGroupChangePolicy: OnRootMismatch
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 999
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: chartsnap-parquet
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: chartsnap
                  app.kubernetes.io/name: parquet
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: ScheduleAnyway
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: chartsnap
                  app.kubernetes.io/name: parquet
              maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
          volumes:
            - configMap:
                name: chartsnap-ca-certs
              name: wandb-ca-certs
            - configMap:
                name: noCertProvided
                optional: true
              name: wandb-ca-certs-user
            - name: redis-ca
              secret:
                items:
                  - key: REDIS_CA_CERT
                    path: redis_ca.pem
                optional: true
                secretName: chartsnap-redis-secret
  schedule: '* * * * *'
  suspend: true
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePostHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePostHook-0.11.2
  name: chartsnap-app-rename-post-hook
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePreHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePreHook-0.11.2
  name: chartsnap-app-rename-pre-hook
---
apiVersion: v1
data:
  post_upgrade.sh: |
    #!/bin/bash

    NAMESPACE="default"
    RELEASE="chartsnap"
    DEPLOYMENTS="app parquet weave weave-trace"

    for deployment in ${DEPLOYMENTS}; do
      output=$(kubectl -n "$NAMESPACE" get deployment "${RELEASE}-${deployment}" 2>&1)
      status=$?
      if [ $status -eq 0 ]; then
        echo "Waiting for deployment '${RELEASE}-${deployment}-bc' to become available..."
        kubectl -n "$NAMESPACE" rollout status deploy/"${RELEASE}-${deployment}-bc" || exit $?

        echo "Deleting deployment '${RELEASE}-${deployment}' in namespace '$NAMESPACE'..."
        kubectl -n "$NAMESPACE" delete deployment "${RELEASE}-${deployment}" || exit $?
      else
        if echo "$output" | grep -qi "(NotFound)\|not found"; then
          echo "Deployment '${RELEASE}-${deployment}' not found; skipping delete."
        else
          echo "Error checking deployment '${RELEASE}-${deployment}': $output" >&2
          exit $status
        fi
      fi
    done
  pre_upgrade.sh: |
    #!/bin/bash

    NAMESPACE="default"
    RELEASE="chartsnap"
    DEPLOYMENTS="app parquet weave weave-trace"

    for deployment in ${DEPLOYMENTS}; do
      output=$(kubectl -n "$NAMESPACE" get deployment "${RELEASE}-${deployment}" 2>&1)
      status=$?
      if [ $status -eq 0 ]; then
        echo "Annotating deployment '${RELEASE}-${deployment}' in namespace '$NAMESPACE'..."
        kubectl -n "$NAMESPACE" annotate deployment "${RELEASE}-${deployment}" "helm.sh/resource-policy=keep" --overwrite
      else
        if echo "$output" | grep -qi "(NotFound)\|not found"; then
          echo "Deployment '${RELEASE}-${deployment}' not found; skipping annotation."
        else
          echo "Error checking deployment '${RELEASE}-${deployment}': $output" >&2
          exit $status
        fi
      fi
    done
kind: ConfigMap
metadata:
  annotations:
    helm.sh/hook: pre-upgrade,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
  name: chartsnap-app-rename-cleanup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePostHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePostHook-0.11.2
  name: chartsnap-app-rename-post-hook
rules:
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - delete
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePreHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePreHook-0.11.2
  name: chartsnap-app-rename-pre-hook
rules:
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePostHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePostHook-0.11.2
  name: chartsnap-app-rename-post-hook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chartsnap-app-rename-post-hook
subjects:
  - kind: ServiceAccount
    name: chartsnap-app-rename-post-hook
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePreHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePreHook-0.11.2
  name: chartsnap-app-rename-pre-hook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chartsnap-app-rename-pre-hook
subjects:
  - kind: ServiceAccount
    name: chartsnap-app-rename-pre-hook
    namespace: default
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: operator-wandb-0.35.8
  name: chartsnap-operator-wandb-test-connection
spec:
  containers:
    - command:
        - sh
        - -c
        - pip install wandb==0.21.1 && wandb verify
      env:
        - name: WANDB_BASE_URL
          value: http://chartsnap-app:8080
        - name: WANDB_API_KEY
          value: local-123456789-123456789-123456789-1234
      image: python:3.10
      name: wandb-verify
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePostHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePostHook-0.11.2
  name: chartsnap-app-rename-post-hook
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: appRenamePostHook
        app.kubernetes.io/version: 1.31.12
        helm.sh/chart: appRenamePostHook-0.11.2
    spec:
      containers:
        - command:
            - sh
            - -c
            - /cleanup-scripts/post_upgrade.sh
          env:
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom: null
          image: alpine/k8s:1.31.12
          imagePullPolicy: IfNotPresent
          name: app-rename-post-hook
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          volumeMounts:
            - mountPath: /cleanup-scripts
              name: app-rename-cleanup
      priorityClassName: wandb-global-priority
      restartPolicy: Never
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-app-rename-post-hook
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: appRenamePostHook
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: appRenamePostHook
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            defaultMode: 493
            name: chartsnap-app-rename-cleanup
          name: app-rename-cleanup
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: appRenamePreHook
    app.kubernetes.io/version: 1.31.12
    helm.sh/chart: appRenamePreHook-0.11.2
  name: chartsnap-app-rename-pre-hook
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: appRenamePreHook
        app.kubernetes.io/version: 1.31.12
        helm.sh/chart: appRenamePreHook-0.11.2
    spec:
      containers:
        - command:
            - sh
            - -c
            - /cleanup-scripts/pre_upgrade.sh
          env:
            - name: GLOBAL_ADMIN_API_KEY
              value: local-123456789-123456789-123456789-1234
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
          envFrom: null
          image: alpine/k8s:1.31.12
          imagePullPolicy: IfNotPresent
          name: app-rename-pre-hook
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
          volumeMounts:
            - mountPath: /cleanup-scripts
              name: app-rename-cleanup
      priorityClassName: wandb-global-priority
      restartPolicy: Never
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-app-rename-pre-hook
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: appRenamePreHook
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: chartsnap
              app.kubernetes.io/name: appRenamePreHook
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - configMap:
            defaultMode: 493
            name: chartsnap-app-rename-cleanup
          name: app-rename-cleanup
