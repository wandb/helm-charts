# chartsnap: snapshot_version=v3
---
# Source: operator-wandb/charts/etcd/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: chartsnap-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
    app.kubernetes.io/component: etcd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  policyTypes:
  - Ingress
  - Egress
  egress:
  - {}
  ingress:
  # Allow inbound connections
  - ports:
    - port: 2379
    - port: 2380
---
# Source: operator-wandb/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: chartsnap-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  - Egress
  egress:
  - {}
  ingress:
  # Allow inbound connections
  - ports:
    - port: 6379
---
# Source: operator-wandb/charts/api/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/app/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-app
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/console/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-console
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: console
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/etcd/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
    app.kubernetes.io/component: etcd
spec:
  minAvailable: 51%
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
---
# Source: operator-wandb/charts/flat-run-fields-updater/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-flat-run-fields-updater
  labels:
    helm.sh/chart: flat-run-fields-updater-0.8.0
    app.kubernetes.io/name: flat-run-fields-updater
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: flat-run-fields-updater
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/glue/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-glue
  labels:
    helm.sh/chart: glue-0.8.0
    app.kubernetes.io/name: glue
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: glue
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/parquet/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-parquet
  labels:
    helm.sh/chart: parquet-0.8.0
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: parquet
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/weave/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chartsnap-weave
  labels:
    helm.sh/chart: weave-0.8.0
    app.kubernetes.io/name: weave
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: weave
      app.kubernetes.io/instance: chartsnap
  maxUnavailable: 1
---
# Source: operator-wandb/charts/api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/app/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-app
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/bufstream/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bufstream-service-account
  namespace: default
  labels:
    helm.sh/chart: bufstream-0.3.5
    app: bufstream
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: bufstream
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/console/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-console
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/etcd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: chartsnap-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
---
# Source: operator-wandb/charts/flat-run-fields-updater/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-flat-run-fields-updater
  labels:
    helm.sh/chart: flat-run-fields-updater-0.8.0
    app.kubernetes.io/name: flat-run-fields-updater
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/glue/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-glue
  labels:
    helm.sh/chart: glue-0.8.0
    app.kubernetes.io/name: glue
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-otel-daemonset
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/parquet/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-parquet
  labels:
    helm.sh/chart: parquet-0.8.0
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
  namespace: default
---
# Source: operator-wandb/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: chartsnap-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
---
# Source: operator-wandb/charts/reloader/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-namespace: "default"
    meta.helm.sh/release-name: "chartsnap"
  labels:
    app: chartsnap-reloader
    chart: "reloader-1.3.0"
    release: "chartsnap"
    heritage: "Helm"
    app.kubernetes.io/managed-by: "Helm"
  name: chartsnap-reloader
  namespace: default
---
# Source: operator-wandb/charts/weave/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chartsnap-weave
  labels:
    helm.sh/chart: weave-0.8.0
    app.kubernetes.io/name: weave
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: operator-wandb/templates/bucket.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-bucket
  labels:
data:
  ACCESS_KEY: bWluaW8=
  SECRET_KEY: dGVzdCU0MCUzQyUzRSUyNSU3QiU3RCU3QyU1RSUyMiUyMCU1QyUyQnBhc3N3b3Jk
---
# Source: operator-wandb/templates/clickhouse.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-clickhouse
  annotations:
    "helm.sh/resource-policy": "keep"
  labels:
data:
  CLICKHOUSE_PASSWORD: '###DYNAMIC_FIELD###'
---
# Source: operator-wandb/templates/global.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-global-secret
  labels:
data:
  GORILLA_STATSIG_KEY:
  GORILLA_EMAIL_SINK: aHR0cHM6Ly9hcGkud2FuZGIuYWkvZW1haWwvZGlzcGF0Y2g=
  GORILLA_SLACK_CLIENT_ID:
  GORILLA_SLACK_SECRET:
  SLACK_CLIENT_ID:
  SLACK_SECRET:
---
# Source: operator-wandb/templates/kafka.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-kafka
  labels:
data:
  KAFKA_CLIENT_PASSWORD:
---
# Source: operator-wandb/templates/license.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-license
  annotations:
    "helm.sh/resource-policy": "keep"
  labels:
data:
  license: ""
---
# Source: operator-wandb/templates/mysql.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-mysql
  annotations:
    "helm.sh/resource-policy": "keep"
  labels:
data:
  MYSQL_ROOT_PASSWORD: '###DYNAMIC_FIELD###'
  MYSQL_PASSWORD: '###DYNAMIC_FIELD###'
---
# Source: operator-wandb/templates/parquet.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-parquet-secret
  labels:
data: {}
---
# Source: operator-wandb/templates/redis.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "chartsnap-redis-secret"
  labels:
data:
  REDIS_PASSWORD: cmVkaXMxMjM=
  REDIS_CA_CERT:
---
# Source: operator-wandb/templates/session-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chartsnap-gorilla-session-key
  annotations:
    "helm.sh/resource-policy": "keep"
  labels:
type: Opaque
data:
  # Retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  # Set $gorillaSessionKey to existing secret data or generate a random one when not exists
  GORILLA_SESSION_KEY: "###DYNAMIC_FIELD###"
  GORILLA_AUTH_JWK_URL: "aHR0cDovL2NoYXJ0c25hcC1hcHA6ODA4My9hcGkvandrcy5qc29u"
---
# Source: operator-wandb/charts/bufstream/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bufstream-config
  namespace: default
  labels:
    helm.sh/chart: bufstream-0.3.5
    app: bufstream
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: bufstream
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |2-

    cluster: bufstream
    connect_address:
      host: 0.0.0.0
      port: 8080
    etcd:
      addresses:
      - host: chartsnap-etcd.default.svc.cluster.local
        port: 2379
    kafka:
      address:
        host: 0.0.0.0
        port: 9092
      exact_log_offsets: false
      exact_log_sizes: true
      fetch_eager: true
      fetch_sync: true
      group_consumer_session_timeout: 45s
      group_consumer_session_timeout_max: 60s
      group_consumer_session_timeout_min: 10s
      idle_timeout: 0
      num_partitions: 1
      partition_balance_strategy: BALANCE_STRATEGY_PARTITION
      produce_concurrent: true
      public_address:
        host: bufstream.default.svc.cluster.local
        port: 9092
      request_buffer_size: 5
      zone_balance_strategy: BALANCE_STRATEGY_PARTITION
    observability:
      debug_address:
        host: 0.0.0.0
        port: 9090
      log_git_version: true
      log_level: INFO
      metrics:
        exporter_type: NONE
      sensitive_information_redaction: NONE
      traces:
        exporter_type: NONE
        trace_ratio: 0.1
    storage:
      access_key_id:
        string: minio
      bucket: bucket
      endpoint: http://minio.minio.svc.cluster.local:9000
      force_path_style: true
      provider: S3
      region: us-east-1
      secret_access_key:
        path: /config/secrets/storage/secret_access_key
    zone: kind
---
# Source: operator-wandb/charts/mysql/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-mysql-initdb
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.16.0"
    wandb.com/app-name: mysql-0.1.0
    app.kubernetes.io/managed-by: Helm
data:
  my.cnf: |
    [mysqld]
    binlog_format = 'ROW'
    innodb_online_alter_log_max_size = 268435456
    sync_binlog = 1
    innodb_flush_log_at_trx_commit = 1
    binlog_row_image = 'MINIMAL'
    local-infile = 1
    sort_buffer_size = 33554432
  # We need RELOAD, SELECT, and LOCK TABLES for making backups
  initdb.sql: |
    GRANT SESSION_VARIABLES_ADMIN,RELOAD,SELECT,LOCK TABLES ON *.* TO `wandb`@`%`;
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-otel-daemonset
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
data:
  config: |
    exporters:
      debug: {}
      debug/detailed:
        verbosity: detailed
      prometheus:
        endpoint: 0.0.0.0:9109
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    processors:
      batch: {}
      k8sattributes:
        extract:
          annotations:
          - from: pod
            key_regex: (.*)
            tag_name: $$1
          labels:
          - from: pod
            key_regex: (.*)
            tag_name: $$1
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    receivers:
      filelog:
        exclude: []
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: 2006-01-02T15:04:05.999999999Z07:00
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - combine_field: attributes.log
          combine_with: ""
          id: crio-recombine
          is_last_entry: attributes.logtag == 'F'
          max_log_size: 102400
          output: extract_metadata_from_filepath
          source_identifier: attributes["log.file.path"]
          type: recombine
        - id: parser-containerd
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - combine_field: attributes.log
          combine_with: ""
          id: containerd-recombine
          is_last_entry: attributes.logtag == 'F'
          max_log_size: 102400
          output: extract_metadata_from_filepath
          source_identifier: attributes["log.file.path"]
          type: recombine
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - from: attributes.log
          to: body
          type: move
        start_at: end
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu: null
          disk: null
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
          load: null
          memory: null
          network: null
      k8s_cluster:
        collection_interval: 10s
      k8sobjects:
        objects:
        - exclude_watch_type:
          - DELETED
          group: events.k8s.io
          mode: watch
          name: events
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 20s
        endpoint: https://${env:K8S_NODE_NAME}:10250
        insecure_skip_verify: true
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      statsd:
        endpoint: 0.0.0.0:8125
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        logs:
          exporters:
          - debug
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          receivers:
          - filelog
        metrics:
          exporters:
          - debug
          - prometheus
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          receivers:
          - hostmetrics
          - k8s_cluster
          - kubeletstats
        traces:
          exporters:
          - debug
          processors:
          - batch
          - memory_limiter
          - k8sattributes
          receivers:
          - otlp
      telemetry:
        metrics:
          address: ${env:POD_IP}:8888
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
  namespace: default
data:
  allow-snippet-annotations: "false"
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - honor_labels: true
      job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
    - honor_labels: true
      job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - honor_labels: true
      job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: service
    - honor_labels: true
      job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
    - honor_labels: true
      job_name: kubernetes-pods-slow
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
      scrape_interval: 5m
      scrape_timeout: 30s
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: operator-wandb/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: operator-wandb/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: operator-wandb/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: operator-wandb/templates/api.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-api-configmap
  labels:
data:
  GORILLA_PORT: "8081"
  GORILLA_FRONTEND_HOST: "http://localhost:8080"
  GORILLA_LICENSE_CERT_PATH: "/jwks.json"
  GORILLA_FILE_METADATA_SOURCE_IS_INTERNAL: "true"
  GORILLA_SESSION_LENGTH: "720h"
  GORILLA_SWEEP_PROVIDER: "http://chartsnap-app:8082"
  GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE: "/view-spec-updater-linux"
  GORILLA_LIMITER: "noop://"
  GORILLA_PARQUET_RPC_PATH: "/_goRPC_"
  GORILLA_SCHEMA_FILE: "/schema.graphql"
  GORILLA_USE_PARQUET_HISTORY_STORE: "true"
  GORILLA_PARQUET_PORT: "8087"
  GORILLA_PARQUET_ARROW_BUFFER_SIZE: "2147483648"
  GORILLA_RUN_UPDATE_QUEUE_ADDR: "internal://"
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_NAME: "wandb"
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_PREFIX: "wandb-overflow"
  GORILLA_AUTH_METHOD: implicit
  GORILLA_TASK_QUEUE_WORKER_ENABLED: "false"
---
# Source: operator-wandb/templates/app.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-app-configmap
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  WEAVE_SERVICE: "chartsnap-weave:9994"
  WEAVE_ENABLED: "true"
  PARQUET_ENABLED: "true"
  PARQUET_HOST: "http://chartsnap-parquet:8087"
  OPERATOR_ENABLED: "true"
  LOGGING_ENABLED: "true"
---
# Source: operator-wandb/templates/bucket.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-bucket-configmap
  labels:
data:
  BUCKET_NAME: "minio.minio.svc.cluster.local:9000/bucket"
  BUCKET_PATH: ""
  AWS_REGION: "us-east-1"
  AWS_S3_KMS_ID: ""
  GORILLA_DEFAULT_REGION: "minio-local"
---
# Source: operator-wandb/templates/certs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-ca-certs
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: operator-wandb/templates/clickhouse.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-clickhouse-configmap
  labels:
data:
  WF_CLICKHOUSE_PORT: "8443"
  WF_CLICKHOUSE_HOST: "chartsnap-clickhouse-headless"
  WF_CLICKHOUSE_DATABASE: "weave_trace_db"
  WF_CLICKHOUSE_USER: "default"
  WF_CLICKHOUSE_REPLICATED: "false"
---
# Source: operator-wandb/templates/console.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-console-configmap
  labels:
data:
  # ex: AWS("arn:aws:iam::{acc_number}:role/{customer_namespace}-node")
  BUCKET_ACCESS_IDENTITY: "unknown"
  AUTH_SERVICE: "chartsnap-app:8080"
  OPERATOR_NAMESPACE: "default"
  RELEASE_NAME: "chartsnap"
  RELEASE_NAMESPACE: "default"
  PROMETHEUS_SERVER: "http://chartsnap-prometheus-server"
  BANNERS: "{}"
---
# Source: operator-wandb/templates/executor.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-executor-configmap
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data: {}
---
# Source: operator-wandb/templates/filestream.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-filestream-configmap
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data: {}
---
# Source: operator-wandb/templates/flat-run-fields-updater.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-flat-run-fields-updater-configmap
  labels:
data:
  GORILLA_FILE_HOST: "http://localhost:8080"
  GORILLA_RUN_UPDATE_QUEUE_ADDR: "internal://"
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_NAME: "wandb"
  GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_PREFIX: "wandb-overflow"
---
# Source: operator-wandb/templates/frontend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-frontend-configmap
  labels:
data:
  PUBLIC_URL: "http://localhost:8080"
  REACT_APP_GIT_TAG: "HEAD"
  REACT_APP_HOST: "http://localhost:8080"
  REACT_APP_ENVIRONMENT_NAME: "local"
  REACT_APP_ENVIRONMENT_IS_PRIVATE: "true"
  REACT_APP_ANALYTICS_DISABLED: "true"
  WEAVE_TRACES_ENABLED: 'false'
---
# Source: operator-wandb/templates/frontend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-frontend-patch-env-js
  labels:
data:
  02_patch_env_js.sh: |
    #!/bin/bash
    function append_env_js() {
      local key=$1
      local value=$2
      local env_js_path="$BUILD_DIR/env.js"
      if [ -w "$env_js_path" ]; then
        printf "Object.assign(window.CONFIG, {%s: %s});\n" "$key" "$value" >> "$env_js_path"
      fi
    }
    function extract_server_flags() {
      # This function builds a javascript string that gets appended to env.js
      # it defines a SERVER_FLAGS object maping env vars which start with "SERVER_FLAG_"
      # where each key is the rest of that env var name and the value is that as a string.
      local env_js_path="$BUILD_DIR/env.js"
      local new_js=""
      # define the object and open it with '{ '
      # pad with a <space> incase no server flags are set
      printf -v new_js "const SERVER_FLAGS = { "
      for name in "${!SERVER_FLAG_@}"; do
        # append the to the new_js bash variable the key/value pair
        printf -v new_js '%s"%s": "%s",' "${new_js}" "${name:12}" "${!name}"
      done
      # remove the trailing comma and close the object
      local length="${#new_js}"-1
      printf "${new_js:0:length}};\n" >> "$env_js_path"
      append_env_js "SERVER_FLAGS" "SERVER_FLAGS"
     }
    function known_additional_flags() {
      if [ "$CI" == "1" ]; then
        append_env_js "CI" "true"
        echo "WARN: use REACT_APP_CI instead"
      fi
      if [ "$(echo "$DISABLE_TELEMETRY" | tr '[:lower:]')" == "true" ]; then
        append_env_js "DISABLE_TELEMETRY" "true"
        echo "WARN: use REACT_APP_DISABLE_TELEMETRY instead"
      fi
      if [ "$WEAVE_ENABLED" == "true" ]; then
        echo "WARN: use REACT_APP_WEAVE_BACKEND_HOST instead"
        append_env_js "WEAVE_BACKEND_HOST" \"/__weave\"
      fi
      if [ "$WEAVE_TRACES_ENABLED" == "true" ]; then
        append_env_js "TRACE_BACKEND_BASE_URL" \"/traces\"
      fi
      if [ "$ENABLE_RBAC_UI" == "true" ]; then
        append_env_js "ENABLE_RBAC_UI" "true"
      fi
      if [ "$OPERATOR_ENABLED" = "true" ]; then
        append_env_js "OPERATOR_ENABLED" "true"
      fi
      # GORILLA_CUSTOMER_SECRET_STORE_SOURCE is populated by terraform in the global secrets map
      # which determines ENABLE_SECRET_STORE
      if [[ -n "$GORILLA_CUSTOMER_SECRET_STORE_SOURCE" && "$GORILLA_CUSTOMER_SECRET_STORE_SOURCE" != "noop://" ]]; then
        append_env_js "ENABLE_SECRET_STORE" "true"
      fi
      if [ -n "$BANNERS" ]; then
        append_env_js "BANNERS" "$BANNERS"
      else
        append_env_js "BANNERS" "{}"
      fi
      if [ "$ENABLE_REGISTRY_UI" == "true" ]; then
        append_env_js "ENABLE_REGISTRY_UI" "true"
      fi
    }

    function main() {
      # Server flag templating
      if ! grep -q 'const SERVER_FLAGS =' "$BUILD_DIR/env.js"; then
        extract_server_flags
        known_additional_flags
      else
        echo "WARN: Server Flag already completed."
      fi
    }
    main "$@"
---
# Source: operator-wandb/templates/global.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-global-configmap
  labels:
data:
  # Statsd configuration (matches existing GORILLA_STATSD_PORT from gorilla.yaml)
  GORILLA_STATSD_PORT: "8125"
  # T-shirt size for deployment
  GORILLA_TSHIRT_SIZE: "testing"
  GORILLA_ONPREM: "true"
  ONPREM: "true"
---
# Source: operator-wandb/templates/glue.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-glue-configmap
  labels:
data:
  # Basic service configuration
  GORILLA_GLUE_CONTAINER_PORT: "8080"
  GORILLA_GLUE_FRONTEND_HOST: "http://localhost:8080"
  GORILLA_GLUE_LICENSE_CERT_PATH: "/jwks.json"
  # Values that correspond to existing configurations from gorilla.yaml
  GORILLA_GLUE_SWEEP_PROVIDER: "http://chartsnap-app:8082"
  GORILLA_GLUE_SESSION_LENGTH: "720h"
  GORILLA_GLUE_DEV: "false"
  GORILLA_GLUE_USE_PARQUET_HISTORY_STORE: "true"
  GORILLA_GLUE_COLLECT_AUDIT_LOGS: "true"
  GORILLA_GLUE_TASK_QUEUE_WORKER_ENABLED: "false"
  GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE: "/view-spec-updater-linux"
  GORILLA_GLUE_DEFAULT_REGION: "minio-local"
  GORILLA_GLUE_DISABLE_TELEMETRY: "true"
  GORILLA_GLUE_FILE_STORE_IS_PROXIED: "false"
  GORILLA_GLUE_ARTIFACT_GC_ENABLED: "false"
  GORILLA_ARTIFACTS_GC_BATCH_SIZE: "0"
  GORILLA_ARTIFACTS_GC_NUM_WORKERS: "0"
  GORILLA_ARTIFACTS_GC_DELETE_FILES_NUM_WORKERS: "0"
  # Task configuration (existing values)
  GORILLA_GLUE_TASK_PROVIDER: "memory://"
  GORILLA_GLUE_TASK_CONFIG_PATH: "/gorilla_glue_tasks_local.yaml"
  GORILLA_GLUE_TASK_STORE: "memory://"
  # ClickHouse configuration using existing clickhouse variables
  GORILLA_GLUE_CLICKHOUSE_ADDRESS: "http://$(WF_CLICKHOUSE_HOST):$(WF_CLICKHOUSE_PORT)"
  # Activity store configuration
  GORILLA_GLUE_ACTIVITY_STORE_ENABLE: "true"
  GORILLA_GLUE_ACTIVITY_STORE_SERVE: "true"
  GORILLA_GLUE_ACTIVITY_STORE_BACKFILL_ENABLE: "true"
  # Monitoring configurations

  # Clear task dedupe key configuration
  GORILLA_GLUE_CLEAR_TASK_DEDUPE_KEY_ENABLED: "false"
---
# Source: operator-wandb/templates/kafka.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-kafka-configmap
  labels:
data:
  KAFKA_BROKER_HOST: "bufstream"
  KAFKA_BROKER_PORT: "9092"
  KAFKA_CLIENT_USER: ""
  KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE: "chartsnap-run-updates-shadow"
  KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS: "100"
---
# Source: operator-wandb/templates/local.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-local-configmap
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  GLUE_ENABLED: "false"
  GORILLA_GLUE_CONTAINER_PORT: "9173"
  HOST: "http://localhost:8080"
---
# Source: operator-wandb/templates/mysql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-mysql-configmap
  labels:
data:
  MYSQL_PORT: "3306"
  MYSQL_HOST: "chartsnap-mysql"
  MYSQL_DATABASE: "wandb_local"
  MYSQL_USER: "wandb"
---
# Source: operator-wandb/templates/parquet.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-parquet-configmap
  labels:
data:
  # Port configuration
  GORILLA_PARQUET_PORT: "8087"
  # RPC path configuration
  GORILLA_PARQUET_RPC_PATH: "/_goRPC_"
  # Task queue configuration
  GORILLA_TASK_QUEUE_WORKER_ENABLED: "false"
  # Parquet-specific configuration
  GORILLA_USE_PARQUET_HISTORY_STORE: "true"
  GORILLA_PARQUET_ARROW_BUFFER_SIZE: "2147483648" # 2GB
  GORILLA_COLLECT_AUDIT_LOGS: "true"
---
# Source: operator-wandb/templates/redis.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-redis-configmap
  labels:
data:
  REDIS_PORT: "6379"
  REDIS_HOST: "chartsnap-redis-master"
  REDIS_PARAMS: "?ttlInSeconds=604800"
---
# Source: operator-wandb/templates/weave-trace.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-weave-trace-configmap
  labels:
data:
  PORT: "8080"
  API_PATH_PREFIX: "/traces"
  WANDB_PUBLIC_BASE_URL: "http://localhost:8080"
  WANDB_BASE_URL: "http://chartsnap-app:8080/"
  WF_TRACE_SERVER_URL: "http://localhost:8080/traces"
  WF_ENFORCE_PASSWORD_LENGTH: "false"
---
# Source: operator-wandb/templates/weave.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chartsnap-weave-configmap
  labels:
data:
  GORILLA_ONPREM: "true"
  PORT: "9994"
  WANDB_BASE_URL: "http://chartsnap-app:8080/"
  WANDB_PUBLIC_BASE_URL: "http://localhost:8080"
  WEAVE_LOG_FORMAT: "json"
  WEAVE_SERVER_NUM_WORKERS: "4"
  WEAVE_SERVER_URL: "http://127.0.0.1:9994"
  WEAVE_LOCAL_ARTIFACT_DIR: "/vol/weave/cache"
  WEAVE_CACHE_CLEAR_INTERVAL: "24"
---
# Source: operator-wandb/charts/mysql/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: chartsnap-mysql-data
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.16.0"
    wandb.com/app-name: mysql-0.1.0
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "20Gi"
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
  namespace: default
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: operator-wandb/charts/console/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chartsnap-console
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - patch
  - create
- apiGroups:
  - ""
  resources:
  - namespaces
  - pods
  - pods/log
  - configmaps
  - services
  - serviceaccounts
  - events
  verbs:
  - get
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  - daemonsets
  - replicasets
  - controllerrevisions
  verbs:
  - get
  - list
- apiGroups:
  - apps
  resources:
  - deployments/status
  - statefulsets/status
  - daemonsets/status
  - replicasets/status
  verbs:
  - get
- apiGroups:
  - apps.wandb.com
  resources:
  - weightsandbiases
  verbs:
  - get
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chartsnap-otel-daemonset
  namespace: default
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
rules:
# kubernetesAttributes
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
# clusterMetrics
- apiGroups: [""]
  resources: ["events", "namespaces", "namespaces/status", "nodes", "nodes/spec", "pods", "pods/status", "replicationcontrollers", "replicationcontrollers/status", "resourcequotas", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["daemonsets", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
# kubeletMetrics
- apiGroups: [""]
  resources: ["nodes/stats"]
  verbs: ["get", "watch", "list"]
# kubernetesEvents
- apiGroups: ["events.k8s.io"]
  resources: ["events"]
  verbs: ["watch", "list"]
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  - ingresses
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses/status
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - "/metrics"
  verbs:
  - get
---
# Source: operator-wandb/charts/console/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chartsnap-console
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: chartsnap-console
  namespace: default
roleRef:
  kind: ClusterRole
  name: chartsnap-console
  apiGroup: rbac.authorization.k8s.io
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chartsnap-otel-daemonset
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: chartsnap-otel-daemonset
subjects:
- kind: ServiceAccount
  name: chartsnap-otel-daemonset
  namespace: default
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
subjects:
- kind: ServiceAccount
  name: chartsnap-prometheus-server
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chartsnap-prometheus-server
---
# Source: operator-wandb/charts/api/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
---
# Source: operator-wandb/charts/app/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chartsnap-app
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
---
# Source: operator-wandb/charts/glue/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chartsnap-glue
  labels:
    helm.sh/chart: glue-0.8.0
    app.kubernetes.io/name: glue
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
---
# Source: operator-wandb/charts/reloader/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-namespace: "default"
    meta.helm.sh/release-name: "chartsnap"
  labels:
    app: chartsnap-reloader
    chart: "reloader-1.3.0"
    release: "chartsnap"
    heritage: "Helm"
    app.kubernetes.io/managed-by: "Helm"
  name: chartsnap-reloader-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - "apps"
  resources:
  - deployments
  - daemonsets
  - statefulsets
  verbs:
  - list
  - get
  - update
  - patch
- apiGroups:
  - "batch"
  resources:
  - cronjobs
  verbs:
  - list
  - get
- apiGroups:
  - "batch"
  resources:
  - jobs
  verbs:
  - create
  - delete
  - list
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: operator-wandb/charts/api/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: chartsnap-api
  namespace: default
roleRef:
  kind: Role
  name: chartsnap-api
  apiGroup: rbac.authorization.k8s.io
---
# Source: operator-wandb/charts/app/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chartsnap-app
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: chartsnap-app
  namespace: default
roleRef:
  kind: Role
  name: chartsnap-app
  apiGroup: rbac.authorization.k8s.io
---
# Source: operator-wandb/charts/glue/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chartsnap-glue
  labels:
    helm.sh/chart: glue-0.8.0
    app.kubernetes.io/name: glue
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: chartsnap-glue
  namespace: default
roleRef:
  kind: Role
  name: chartsnap-glue
  apiGroup: rbac.authorization.k8s.io
---
# Source: operator-wandb/charts/reloader/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-namespace: "default"
    meta.helm.sh/release-name: "chartsnap"
  labels:
    app: chartsnap-reloader
    chart: "reloader-1.3.0"
    release: "chartsnap"
    heritage: "Helm"
    app.kubernetes.io/managed-by: "Helm"
  name: chartsnap-reloader-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chartsnap-reloader-role
subjects:
- kind: ServiceAccount
  name: chartsnap-reloader
  namespace: default
---
# Source: operator-wandb/charts/api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8081
    protocol: TCP
    targetPort: api
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
---
# Source: operator-wandb/charts/app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-app
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: app
    port: 8080
    protocol: TCP
  - name: prometheus
    port: 8181
    protocol: TCP
  - name: anaconda
    port: 8082
    protocol: TCP
  - name: local
    port: 8083
    protocol: TCP
  selector:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
---
# Source: operator-wandb/charts/bufstream/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bufstream
  namespace: default
  labels:
    helm.sh/chart: bufstream-0.3.5
    app: bufstream
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: bufstream
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 9089
    name: admin
  - port: 8080
    name: connect
  - port: 9092
    name: kafka
  selector:
    app: bufstream
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: bufstream
---
# Source: operator-wandb/charts/console/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-console
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: console
    port: 8082
    protocol: TCP
  selector:
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
---
# Source: operator-wandb/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-etcd-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
    app.kubernetes.io/component: etcd
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 2379
    targetPort: client
  - name: peer
    port: 2380
    targetPort: peer
  - name: metrics
    port: 9090
    targetPort: metrics
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: operator-wandb/charts/etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
    app.kubernetes.io/component: etcd
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: "client"
    port: 2379
    targetPort: client
    nodePort: null
  - name: "peer"
    port: 2380
    targetPort: peer
    nodePort: null
  - name: "metrics"
    port: 9090
    targetPort: metrics
    nodePort: null
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: operator-wandb/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-mysql
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.16.0"
    wandb.com/app-name: mysql-0.1.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 3306
    protocol: TCP
    targetPort: mysql
  selector:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.16.0"
    wandb.com/app-name: mysql-0.1.0
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-otel-daemonset
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
    prometheus.io/port: '9109'
spec:
  type:
  ports:
  - port: 9109
    protocol: TCP
    name: otel-exporter
  - port: 8125
    protocol: TCP
    name: statsd
  - port: 4317
    protocol: TCP
    name: otlp-grpc
  - port: 4318
    protocol: TCP
    name: otlp-http
  selector:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/parquet/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-parquet
  labels:
    helm.sh/chart: parquet-0.8.0
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: parquet
    port: 8087
    protocol: TCP
  selector:
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
  namespace: default
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: operator-wandb/charts/prometheus/charts/mysql-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-prometheus-mysql-exporter
  labels:
    helm.sh/chart: mysql-exporter-0.1.0
    app.kubernetes.io/name: prometheus-mysql-exporter
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: mysql-exporter-0.1.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
    prometheus.io/port: '9104'
spec:
  type: ClusterIP
  ports:
  - port: 9104
    protocol: TCP
    name: mysql-exporter
  selector:
    helm.sh/chart: mysql-exporter-0.1.0
    app.kubernetes.io/name: prometheus-mysql-exporter
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: mysql-exporter-0.1.0
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/prometheus/charts/redis-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-prometheus-redis-exporter
  labels:
    helm.sh/chart: redis-exporter-0.1.0
    app.kubernetes.io/name: prometheus-redis-exporter
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: redis-exporter-0.1.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
    prometheus.io/port: '9121'
spec:
  type: ClusterIP
  ports:
  - port: 9121
    protocol: TCP
    name: redis-exporter
  selector:
    helm.sh/chart: redis-exporter-0.1.0
    app.kubernetes.io/name: prometheus-redis-exporter
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: redis-exporter-0.1.0
    app.kubernetes.io/managed-by: Helm
---
# Source: operator-wandb/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: redis
---
# Source: operator-wandb/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: redis
    nodePort: null
  selector:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: operator-wandb/charts/weave/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-weave
  labels:
    helm.sh/chart: weave-0.8.0
    app.kubernetes.io/name: weave
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: weave
    port: 9994
    protocol: TCP
  selector:
    app.kubernetes.io/name: weave
    app.kubernetes.io/instance: chartsnap
---
# Source: operator-wandb/charts/otel/charts/daemonset/templates/deamonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: chartsnap-otel-daemonset
  labels:
    helm.sh/chart: daemonset-0.1.0
    app.kubernetes.io/name: daemonset
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "0.33.0"
    wandb.com/app-name: daemonset-0.1.0
    app.kubernetes.io/managed-by: Helm
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: daemonset
      app.kubernetes.io/instance: chartsnap
      helm.sh/chart: daemonset-0.1.0
      app.kubernetes.io/name: daemonset
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/version: "0.33.0"
      wandb.com/app-name: daemonset-0.1.0
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        helm.sh/chart: daemonset-0.1.0
        app.kubernetes.io/name: daemonset
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "0.33.0"
        wandb.com/app-name: daemonset-0.1.0
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/configmap: fc14657abee2d90189e7f15a05344616103962018473696c62050e52dd81935
    spec:
      serviceAccountName: chartsnap-otel-daemonset
      securityContext:
        runAsUser: 1000
        runAsGroup: 0
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
      containers:
      - name: daemonset
        image: "otel/opentelemetry-collector-contrib:0.97.0"
        securityContext:
          capabilities:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          privileged: false
        command:
        - /otelcol-contrib
        - --config=/conf/config.yaml
        ports:
        - name: otlp
          containerPort: 4317
          protocol: TCP
          hostPort: 4317
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
          hostPort: 4318
        - name: prometheus
          containerPort: 9109
          protocol: TCP
          hostPort: 9109
        - name: statsd
          containerPort: 8125
          protocol: TCP
          hostPort: 8125
        env:
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_HOST
          value: "chartsnap-mysql"
        - name: MYSQL_DATABASE
          value: "wandb_local"
        - name: MYSQL_USER
          value: "wandb"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chartsnap-mysql
              key: MYSQL_PASSWORD
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 200m
            memory: 200Mi
        volumeMounts:
        - mountPath: /conf
          name: config
        - name: varlogpods
          mountPath: /var/log/pods
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: hostfs
          mountPath: /hostfs
          readOnly: true
          mountPropagation: HostToContainer
      volumes:
      - name: hostfs
        hostPath:
          path: /
      - name: varlogpods
        hostPath:
          path: /var/log/pods
      - name: config
        configMap:
          name: chartsnap-otel-daemonset
          items:
          - key: config
            path: config.yaml
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      hostNetwork: false
---
# Source: operator-wandb/charts/api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-api
  labels:
    helm.sh/chart: api-0.8.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-api-configmap,chartsnap-bucket-configmap,chartsnap-global-configmap,chartsnap-kafka-configmap,chartsnap-mysql-configmap,chartsnap-redis-configmap
    secret.reloader.stakater.com/reload: chartsnap-global-secret,chartsnap-gorilla-session-key
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: api-0.8.0
        app.kubernetes.io/name: api
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: api
        args:
        - gorilla
        envFrom:
        - configMapRef:
            name: chartsnap-api-configmap
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - secretRef:
            name: chartsnap-gorilla-session-key
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          name: api
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ready
            port: api
          periodSeconds: 5
          successThreshold: 1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
      initContainers:
      - name: init-db
        command:
        - bash
        - -c
        - until mysql -h$MYSQL_HOST -u$MYSQL_USER -p"$(python -c "import sys; from urllib import parse; print(parse.unquote_plus(sys.argv[1]))" $MYSQL_PASSWORD)" -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done
        envFrom:
        - configMapRef:
            name: chartsnap-api-configmap
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - secretRef:
            name: chartsnap-gorilla-session-key
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/local:latest"
        imagePullPolicy:
      - name: migrate-db
        command:
        - bash
        - -c
        - ./megabinary migrate --db=$GORILLA_METADATA_STORE --runs-db=$GORILLA_RUN_STORE || true; ./megabinary migrate --db=$GORILLA_METADATA_STORE --usage-db=$GORILLA_USAGE_STORE || true
        envFrom:
        - configMapRef:
            name: chartsnap-api-configmap
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - secretRef:
            name: chartsnap-gorilla-session-key
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
      serviceAccountName: chartsnap-api
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: api
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: api
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: wandb-ca-certs
        configMap:
          name: "chartsnap-ca-certs"
      - name: wandb-ca-certs-user
        configMap:
          name: 'noCertProvided'
          optional: true
      - name: redis-ca
        secret:
          secretName: 'chartsnap-redis-secret'
          items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
          optional: true
---
# Source: operator-wandb/charts/app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-app-bc
  labels:
    helm.sh/chart: app-0.8.0
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-api-configmap,chartsnap-app-configmap,chartsnap-bucket-configmap,chartsnap-frontend-configmap,chartsnap-global-configmap,chartsnap-glue-configmap,chartsnap-kafka-configmap,chartsnap-mysql-configmap,chartsnap-redis-configmap
    secret.reloader.stakater.com/reload: chartsnap-global-secret,chartsnap-gorilla-session-key
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: app-0.8.0
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: app
        envFrom:
        - configMapRef:
            name: chartsnap-api-configmap
        - configMapRef:
            name: chartsnap-app-configmap
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-frontend-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-glue-configmap
        - secretRef:
            name: chartsnap-gorilla-session-key
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: BUCKET_QUEUE
          value: "internal://"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_GLUE_CONTAINER_PORT
          value: "8083"
        - name: GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE
          value: "/usr/local/bin/view-spec-updater-linux"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_LICENSE_CERT_PATH
          value: "/var/app/jwks.json"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://local-files"
        - name: GORILLA_TASK_CONFIG_PATH
          value: "/etc/service/gorilla-glue/glue_tasks_local.yaml"
        - name: GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE
          value: "/usr/local/bin/view-spec-updater-linux"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/local:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8181
          name: prometheus
          protocol: TCP
        - containerPort: 8082
          name: anaconda
          protocol: TCP
        - containerPort: 8083
          name: local
          protocol: TCP
        - containerPort: 8125
          name: gorilla-statsd
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 20
          periodSeconds: 5
        startupProbe:
          failureThreshold: 120
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 20
          periodSeconds: 5
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "25"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
      initContainers:
      - name: init-db
        command:
        - bash
        - -c
        - until mysql -h$MYSQL_HOST -u$MYSQL_USER -p"$(python -c "import sys; from urllib import parse; print(parse.unquote_plus(sys.argv[1]))" $MYSQL_PASSWORD)" -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done
        envFrom:
        - configMapRef:
            name: chartsnap-api-configmap
        - configMapRef:
            name: chartsnap-app-configmap
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-frontend-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-glue-configmap
        - secretRef:
            name: chartsnap-gorilla-session-key
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: BUCKET_QUEUE
          value: "internal://"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_GLUE_CONTAINER_PORT
          value: "8083"
        - name: GORILLA_GLUE_VIEW_SPEC_UPDATER_EXECUTABLE
          value: "/usr/local/bin/view-spec-updater-linux"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_LICENSE_CERT_PATH
          value: "/var/app/jwks.json"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://local-files"
        - name: GORILLA_TASK_CONFIG_PATH
          value: "/etc/service/gorilla-glue/glue_tasks_local.yaml"
        - name: GORILLA_VIEW_SPEC_UPDATER_EXECUTABLE
          value: "/usr/local/bin/view-spec-updater-linux"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/local:latest"
        imagePullPolicy:
      serviceAccountName: chartsnap-app
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: app
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: app
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: wandb-ca-certs
        configMap:
          name: "chartsnap-ca-certs"
      - name: wandb-ca-certs-user
        configMap:
          name: 'noCertProvided'
          optional: true
      - name: redis-ca
        secret:
          secretName: 'chartsnap-redis-secret'
          items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
          optional: true
---
# Source: operator-wandb/charts/console/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-console-bc
  labels:
    helm.sh/chart: console-0.8.0
    app.kubernetes.io/name: console
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-console-configmap
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: console
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: console-0.8.0
        app.kubernetes.io/name: console
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: console
        envFrom:
        - configMapRef:
            name: chartsnap-console-configmap
        env:
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/console:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /console/api/healthz
            port: http
        readinessProbe:
          httpGet:
            path: /console/api/ready
            port: http
          initialDelaySeconds: 20
          periodSeconds: 5
        startupProbe:
          failureThreshold: 120
          httpGet:
            path: /console/api/ready
            port: http
          initialDelaySeconds: 20
          periodSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          request:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: "1"
            memory: 1Gi
      serviceAccountName: chartsnap-console
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: console
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: console
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
---
# Source: operator-wandb/charts/flat-run-fields-updater/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-flat-run-fields-updater-bc
  labels:
    helm.sh/chart: flat-run-fields-updater-0.8.0
    app.kubernetes.io/name: flat-run-fields-updater
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-bucket-configmap,chartsnap-flat-run-fields-updater-configmap,chartsnap-global-configmap,chartsnap-kafka-configmap,chartsnap-mysql-configmap,chartsnap-redis-configmap
    secret.reloader.stakater.com/reload: chartsnap-global-secret
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flat-run-fields-updater
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: flat-run-fields-updater-0.8.0
        app.kubernetes.io/name: flat-run-fields-updater
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: flat-run-fields-updater
        args:
        - flat-run-fields-updater
        envFrom:
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-flat-run-fields-updater-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_SUBSCRIPTIONS_FLAT_RUN_FIELDS_UPDATER
          value: 'kafka://$(KAFKA_BROKER_HOST):9092/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?consumer_group_id=flat-run-fields-updater&num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)'
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
      serviceAccountName: chartsnap-flat-run-fields-updater
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: flat-run-fields-updater
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: flat-run-fields-updater
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: wandb-ca-certs
        configMap:
          name: "chartsnap-ca-certs"
      - name: wandb-ca-certs-user
        configMap:
          name: 'noCertProvided'
          optional: true
      - name: redis-ca
        secret:
          secretName: 'chartsnap-redis-secret'
          items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
          optional: true
---
# Source: operator-wandb/charts/glue/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-glue
  labels:
    helm.sh/chart: glue-0.8.0
    app.kubernetes.io/name: glue
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-bucket-configmap,chartsnap-global-configmap,chartsnap-glue-configmap,chartsnap-kafka-configmap,chartsnap-mysql-configmap,chartsnap-redis-configmap
    secret.reloader.stakater.com/reload: chartsnap-global-secret
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: glue
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: glue-0.8.0
        app.kubernetes.io/name: glue
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: glue
        args:
        - glue
        envFrom:
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-glue-configmap
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
      initContainers:
      - name: init-db
        command:
        - bash
        - -c
        - until mysql -h$MYSQL_HOST -u$MYSQL_USER -p"$(python -c "import sys; from urllib import parse; print(parse.unquote_plus(sys.argv[1]))" $MYSQL_PASSWORD)" -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done
        envFrom:
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-glue-configmap
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/local:latest"
        imagePullPolicy:
      - name: migrate-db
        command:
        - bash
        - -c
        - ./megabinary migrate --db=$GORILLA_METADATA_STORE --runs-db=$GORILLA_RUN_STORE || true; ./megabinary migrate --db=$GORILLA_METADATA_STORE --usage-db=$GORILLA_USAGE_STORE || true
        envFrom:
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-glue-configmap
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
      serviceAccountName: chartsnap-glue
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: glue
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: glue
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: wandb-ca-certs
        configMap:
          name: "chartsnap-ca-certs"
      - name: wandb-ca-certs-user
        configMap:
          name: 'noCertProvided'
          optional: true
      - name: redis-ca
        secret:
          secretName: 'chartsnap-redis-secret'
          items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
          optional: true
---
# Source: operator-wandb/charts/parquet/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-parquet-bc
  labels:
    helm.sh/chart: parquet-0.8.0
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-bucket-configmap,chartsnap-global-configmap,chartsnap-kafka-configmap,chartsnap-mysql-configmap,chartsnap-parquet-configmap,chartsnap-redis-configmap
    secret.reloader.stakater.com/reload: chartsnap-global-secret
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: parquet
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: parquet-0.8.0
        app.kubernetes.io/name: parquet
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: parquet
        args:
        - parquet
        envFrom:
        - configMapRef:
            name: chartsnap-bucket-configmap
        - configMapRef:
            name: chartsnap-global-configmap
        - secretRef:
            name: chartsnap-global-secret
        - configMapRef:
            name: chartsnap-kafka-configmap
        - configMapRef:
            name: chartsnap-mysql-configmap
        - configMapRef:
            name: chartsnap-parquet-configmap
        - configMapRef:
            name: chartsnap-redis-configmap
        env:
        - name: G_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "ACCESS_KEY"
              optional: true
        - name: BUCKET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "chartsnap-bucket"
              key: "SECRET_KEY"
              optional: true
        - name: BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_FILE_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: GORILLA_STORAGE_BUCKET
          value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-mysql"
              key: "MYSQL_PASSWORD"
        - name: MYSQL
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_ANALYTICS_SINK
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_METADATA_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_USAGE_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-redis-secret"
              key: "REDIS_PASSWORD"
              optional: true
        - name: REDIS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_AUDITOR_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_FILE_METADATA_SOURCE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_LOCKER
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_METADATA_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_SETTINGS_CACHE
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
        - name: GORILLA_TASK_QUEUE
          value: "noop://"
        - name: KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "chartsnap-kafka"
              key: "KAFKA_CLIENT_PASSWORD"
              optional: true
        - name: GORILLA_FILE_STREAM_STORE_ADDRESS
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
          value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
        - name: GORILLA_HISTORY_STORE
          value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
          value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
        - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
          value: ""
        - name: LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GORILLA_LICENSE
          valueFrom:
            secretKeyRef:
              name: "chartsnap-license"
              key: "license"
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/megabinary:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8087
          name: parquet
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8087
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8087
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
      serviceAccountName: chartsnap-parquet
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: parquet
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: parquet
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: wandb-ca-certs
        configMap:
          name: "chartsnap-ca-certs"
      - name: wandb-ca-certs-user
        configMap:
          name: 'noCertProvided'
          optional: true
      - name: redis-ca
        secret:
          secretName: 'chartsnap-redis-secret'
          items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
          optional: true
---
# Source: operator-wandb/charts/prometheus/charts/instance/templates/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: v2.47.0
    helm.sh/chart: instance-24.5.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: chartsnap-prometheus-server
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: chartsnap
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: v2.47.0
        helm.sh/chart: instance-24.5.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: prometheus
    spec:
      enableServiceLinks: true
      serviceAccountName: chartsnap-prometheus-server
      containers:
      - name: prometheus-server-configmap-reload
        image: "quay.io/prometheus-operator/prometheus-config-reloader:v0.67.0"
        imagePullPolicy: "IfNotPresent"
        args:
        - --watched-dir=/etc/config
        - --reload-url=http://127.0.0.1:9090/-/reload
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
      - name: prometheus-server
        image: "quay.io/prometheus/prometheus:v2.47.0"
        imagePullPolicy: "IfNotPresent"
        args:
        - --storage.tsdb.retention.time=15d
        - --config.file=/etc/config/prometheus.yml
        - --storage.tsdb.path=/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        ports:
        - containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: storage-volume
          mountPath: /data
          subPath: ""
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
      - name: config-volume
        configMap:
          name: chartsnap-prometheus-server
      - name: storage-volume
        persistentVolumeClaim:
          claimName: chartsnap-prometheus-server
---
# Source: operator-wandb/charts/reloader/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-namespace: "default"
    meta.helm.sh/release-name: "chartsnap"
  labels:
    app: chartsnap-reloader
    chart: "reloader-1.3.0"
    release: "chartsnap"
    heritage: "Helm"
    app.kubernetes.io/managed-by: "Helm"
    group: com.stakater.platform
    provider: stakater
    version: v1.3.0
  name: chartsnap-reloader
  namespace: default
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: chartsnap-reloader
      release: "chartsnap"
  template:
    metadata:
      labels:
        app: chartsnap-reloader
        chart: "reloader-1.3.0"
        release: "chartsnap"
        heritage: "Helm"
        app.kubernetes.io/managed-by: "Helm"
        group: com.stakater.platform
        provider: stakater
        version: v1.3.0
    spec:
      containers:
      - image: "ghcr.io/stakater/reloader:v1.3.0"
        imagePullPolicy: IfNotPresent
        name: chartsnap-reloader
        env:
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
              divisor: '1'
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: http
          containerPort: 9090
        livenessProbe:
          httpGet:
            path: /live
            port: http
          timeoutSeconds: 5
          failureThreshold: 5
          periodSeconds: 10
          successThreshold: 1
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: http
          timeoutSeconds: 5
          failureThreshold: 5
          periodSeconds: 10
          successThreshold: 1
          initialDelaySeconds: 10
        securityContext: {}
        args:
        - "--log-level=info"
        - "--reload-on-create=true"
        - "--reload-on-delete=true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: chartsnap-reloader
---
# Source: operator-wandb/charts/weave/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-weave-bc
  labels:
    helm.sh/chart: weave-0.8.0
    app.kubernetes.io/name: weave
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    configmap.reloader.stakater.com/reload: chartsnap-weave-configmap
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weave
      app.kubernetes.io/instance: chartsnap
  template:
    metadata:
      labels:
        helm.sh/chart: weave-0.8.0
        app.kubernetes.io/name: weave
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: weave
        envFrom:
        - configMapRef:
            name: chartsnap-weave-configmap
        env:
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/weave-python:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9994
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /__weave/hello
            port: http
        readinessProbe:
          httpGet:
            path: /__weave/hello
            port: http
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /__weave/hello
            port: http
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /vol/weave/cache
          name: cache
      - name: weave-cache-clear
        command:
        - python
        - weave-public/weave_query/scripts/clear_cache.py
        envFrom:
        - configMapRef:
            name: chartsnap-weave-configmap
        env:
        - name: GLOBAL_ADMIN_API_KEY
          value: "local-123456789-123456789-123456789-1234"
        - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
          value: "false"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
          value: "true"
        - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add: []
            drop: []
          privileged: false
          readOnlyRootFilesystem: false
        image: "wandb/weave-python:latest"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /vol/weave/cache
          name: cache
      serviceAccountName: chartsnap-weave
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: weave
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/name: weave
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - emptyDir:
          medium: ''
          sizeLimit: '20Gi'
        name: cache
---
# Source: operator-wandb/charts/bufstream/templates/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bufstream
  namespace: default
  labels:
    helm.sh/chart: bufstream-0.3.5
    app: bufstream
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: bufstream
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: bufstream
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: bufstream
  podManagementPolicy: Parallel
  serviceName:
  template:
    metadata:
      labels:
        app: bufstream
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/name: bufstream
        app.kubernetes.io/component: bufstream
        bufstream.buf.build/cluster: "bufstream"
      annotations:
        # Force a new deployment when the config map value changes
        checksum/config: 401f12b83886a1b4ca0e966e926be21760b471ec62425ff254f568e4ad30fb16
    spec:
      containers:
      - name: bufstream
        image: "us-docker.pkg.dev/buf-images-1/bufstream-public/images/bufstream:0.3.5"
        imagePullPolicy: IfNotPresent
        args:
        - "--config"
        - "/config/config.yaml"
        env:
        - name: BUFSTREAM_CONNECT_PUBLIC_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: BUFSTREAM_CONNECT_PUBLIC_PORT
          value: "8080"
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              containerName: bufstream
              resource: requests.cpu
              divisor: 1 # Round up to whole cores, explicitly.
        - name: BUFSTREAM_AVAILABLE_MEMORY
          valueFrom:
            resourceFieldRef:
              containerName: bufstream
              resource: requests.memory
              divisor: 1 # bytes, explicitly.
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            memory: 8Gi
        ports:
        - name: admin
          containerPort: 9089
        - name: connect
          containerPort: 8080
        - name: kafka
          containerPort: 9092
        - name: observability
          containerPort: 9090
        livenessProbe:
          failureThreshold: 3
          timeoutSeconds: 5
          httpGet:
            scheme: "HTTP"
            path: /health
            port: 9090
          periodSeconds: 3
        readinessProbe:
          failureThreshold: 3
          timeoutSeconds: 5
          httpGet:
            scheme: "HTTP"
            path: /ready
            port: 9090
          periodSeconds: 3
        startupProbe:
          httpGet:
            scheme: "HTTP"
            path: /health
            port: 9090
          initialDelaySeconds: 1
          periodSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /config/config.yaml
          name: config-volume
          readOnly: true
          subPath: config.yaml
        - name: storage
          mountPath: /config/secrets/storage
          readOnly: true
      serviceAccountName: bufstream-service-account
      terminationGracePeriodSeconds: 420
      volumes:
      - name: config-volume
        configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: bufstream-config
      - name: storage
        secret:
          secretName: chartsnap-bucket
          items:
          - key: SECRET_KEY
            path: secret_access_key
---
# Source: operator-wandb/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chartsnap-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.17
    helm.sh/chart: etcd-10.7.3
    app.kubernetes.io/component: etcd
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  serviceName: chartsnap-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: etcd
        app.kubernetes.io/version: 3.5.17
        helm.sh/chart: etcd-10.7.3
        app.kubernetes.io/component: etcd
      annotations:
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: chartsnap
                  app.kubernetes.io/name: etcd
                  app.kubernetes.io/component: etcd
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: "chartsnap-etcd"
      containers:
      - name: etcd
        image: docker.io/bitnami/etcd:3.5.17-debian-12-r3
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_STS_NAME
          value: "chartsnap-etcd"
        - name: ETCDCTL_API
          value: "3"
        - name: ETCD_ON_K8S
          value: "yes"
        - name: ETCD_START_FROM_SNAPSHOT
          value: "no"
        - name: ETCD_DISASTER_RECOVERY
          value: "no"
        - name: ETCD_NAME
          value: "$(MY_POD_NAME)"
        - name: ETCD_DATA_DIR
          value: "/bitnami/etcd/data"
        - name: ETCD_LOG_LEVEL
          value: "info"
        - name: ALLOW_NONE_AUTHENTICATION
          value: "yes"
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: "http://$(MY_POD_NAME).chartsnap-etcd-headless.default.svc.cluster.local:2379,http://chartsnap-etcd.default.svc.cluster.local:2379"
        - name: ETCD_LISTEN_CLIENT_URLS
          value: "http://0.0.0.0:2379"
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: "http://$(MY_POD_NAME).chartsnap-etcd-headless.default.svc.cluster.local:2380"
        - name: ETCD_LISTEN_PEER_URLS
          value: "http://0.0.0.0:2380"
        - name: ETCD_LISTEN_METRICS_URLS
          value: "http://0.0.0.0:9090"
        - name: ETCD_AUTO_COMPACTION_MODE
          value: "periodic"
        - name: ETCD_AUTO_COMPACTION_RETENTION
          value: "30s"
        - name: ETCD_INITIAL_CLUSTER_TOKEN
          value: "etcd-cluster-k8s"
        - name: ETCD_INITIAL_CLUSTER_STATE
          value: "new"
        - name: ETCD_INITIAL_CLUSTER
          value: "chartsnap-etcd-0=http://chartsnap-etcd-0.chartsnap-etcd-headless.default.svc.cluster.local:2380,chartsnap-etcd-1=http://chartsnap-etcd-1.chartsnap-etcd-headless.default.svc.cluster.local:2380,chartsnap-etcd-2=http://chartsnap-etcd-2.chartsnap-etcd-headless.default.svc.cluster.local:2380"
        - name: ETCD_CLUSTER_DOMAIN
          value: "chartsnap-etcd-headless.default.svc.cluster.local"
        - name: ETCD_LISTEN_CLIENT_HTTP_URLS
          value: http://0.0.0.0:8080
        envFrom:
        ports:
        - name: client
          containerPort: 2379
          protocol: TCP
        - name: peer
          containerPort: 2380
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /livez
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 15
        readinessProbe:
          httpGet:
            path: /readyz
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 20
          timeoutSeconds: 10
        volumeMounts:
        - name: empty-dir
          mountPath: /opt/bitnami/etcd/conf/
          subPath: app-conf-dir
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
        - name: data
          mountPath: /bitnami/etcd
      volumes:
      - name: empty-dir
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"
---
# Source: operator-wandb/charts/mysql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chartsnap-mysql
  labels:
    helm.sh/chart: mysql-0.1.0
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.16.0"
    wandb.com/app-name: mysql-0.1.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: chartsnap
      helm.sh/chart: mysql-0.1.0
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/version: "1.16.0"
      wandb.com/app-name: mysql-0.1.0
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        helm.sh/chart: mysql-0.1.0
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/version: "1.16.0"
        wandb.com/app-name: mysql-0.1.0
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
      containers:
      - name: mysql
        image: "mysql:latest"
        securityContext:
          allowPrivilegeEscalation: false
        ports:
        - name: mysql
          containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_HOST
          value: "chartsnap-mysql"
        - name: MYSQL_DATABASE
          value: "wandb_local"
        - name: MYSQL_USER
          value: "wandb"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chartsnap-mysql
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chartsnap-mysql
              key: MYSQL_PASSWORD
        livenessProbe:
          tcpSocket:
            port: 3306
        readinessProbe:
          tcpSocket:
            port: 3306
        startupProbe:
          initialDelaySeconds: 20
          periodSeconds: 5
          failureThreshold: 60
          tcpSocket:
            port: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d/initdb.sql
          subPath: initdb.sql
        - name: initdb
          mountPath: /etc/mysql/my.cnf
          subPath: my.cnf
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 100m
            memory: 128Mi
      volumes:
      - name: initdb
        configMap:
          name: chartsnap-mysql-initdb
      - name: data
        persistentVolumeClaim:
          claimName: chartsnap-mysql-data
---
# Source: operator-wandb/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chartsnap-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.19.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: chartsnap-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.19.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: chartsnap-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: chartsnap
                  app.kubernetes.io/name: redis
                  app.kubernetes.io/component: master
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
      - name: redis
        image: docker.io/bitnami/redis:7.2.4-debian-12-r9
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/bash
        args:
        - -c
        - /opt/bitnami/scripts/start-scripts/start-master.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 5
          # One second longer than command timeout should prevent generation of zombie processes.
          timeoutSeconds: 6
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 1
        volumeMounts:
        - name: start-scripts
          mountPath: /opt/bitnami/scripts/start-scripts
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: empty-dir
          mountPath: /opt/bitnami/redis/etc/
          subPath: app-conf-dir
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
      volumes:
      - name: start-scripts
        configMap:
          name: chartsnap-redis-scripts
          defaultMode: 0755
      - name: health
        configMap:
          name: chartsnap-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: chartsnap-redis-configuration
      - name: empty-dir
        emptyDir: {}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: redis-data
      labels:
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: master
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
---
# Source: operator-wandb/charts/parquet/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: chartsnap-parquet-backfill
  labels:
    helm.sh/chart: parquet-0.8.0
    app.kubernetes.io/name: parquet
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  concurrencyPolicy: Forbid
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            helm.sh/chart: parquet-0.8.0
            app.kubernetes.io/name: parquet
            app.kubernetes.io/instance: chartsnap
            app.kubernetes.io/version: "latest"
            app.kubernetes.io/managed-by: Helm
        spec:
          containers:
          - name: backfill-job
            args:
            - glue
            envFrom:
            - configMapRef:
                name: chartsnap-bucket-configmap
            - configMapRef:
                name: chartsnap-global-configmap
            - secretRef:
                name: chartsnap-global-secret
            - configMapRef:
                name: chartsnap-glue-configmap
            - configMapRef:
                name: chartsnap-kafka-configmap
            - configMapRef:
                name: chartsnap-mysql-configmap
            - configMapRef:
                name: chartsnap-parquet-configmap
            - configMapRef:
                name: chartsnap-redis-configmap
            env:
            - name: G_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-bucket"
                  key: "ACCESS_KEY"
                  optional: true
            - name: BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-bucket"
                  key: "ACCESS_KEY"
                  optional: true
            - name: BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-bucket"
                  key: "SECRET_KEY"
                  optional: true
            - name: BUCKET
              value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
            - name: GORILLA_FILE_STORE
              value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_OVERFLOW_BUCKET_STORE
              value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
            - name: GORILLA_STORAGE_BUCKET
              value: "s3://$(BUCKET_ACCESS_KEY):$(BUCKET_SECRET_KEY)@$(BUCKET_NAME)/$(BUCKET_PATH)"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-mysql"
                  key: "MYSQL_PASSWORD"
            - name: MYSQL
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_ANALYTICS_SINK
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_METADATA_STORE
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_RUN_STORE
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_USAGE_STORE
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-redis-secret"
                  key: "REDIS_PASSWORD"
                  optional: true
            - name: REDIS
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_ACTIVITY_STORE_CACHE_ADDRESS
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_AUDITOR_CACHE
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_CACHE
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_FILE_METADATA_SOURCE
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_LOCKER
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_METADATA_CACHE
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_SETTINGS_CACHE
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)$(REDIS_PARAMS)"
            - name: GORILLA_TASK_QUEUE
              value: "noop://"
            - name: KAFKA_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-kafka"
                  key: "KAFKA_CLIENT_PASSWORD"
                  optional: true
            - name: GORILLA_FILE_STREAM_STORE_ADDRESS
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_RUN_UPDATE_SHADOW_QUEUE_ADDR
              value: "kafka://$(KAFKA_BROKER_HOST):$(KAFKA_BROKER_PORT)/$(KAFKA_TOPIC_RUN_UPDATE_SHADOW_QUEUE)?num_partitions=$(KAFKA_RUN_UPDATE_SHADOW_QUEUE_NUM_PARTITIONS)"
            - name: GORILLA_HISTORY_STORE
              value: "http://chartsnap-parquet:8087/_goRPC_,mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_PARQUET_LIVE_HISTORY_STORE
              value: "mysql://$(MYSQL_USER):$(MYSQL_PASSWORD)@$(MYSQL_HOST):$(MYSQL_PORT)/$(MYSQL_DATABASE)?tls=preferred"
            - name: GORILLA_FILE_STREAM_WORKER_STORE_ADDRESS
              value: ""
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-license"
                  key: "license"
            - name: GORILLA_LICENSE
              valueFrom:
                secretKeyRef:
                  name: "chartsnap-license"
                  key: "license"
            - name: GLOBAL_ADMIN_API_KEY
              value: "local-123456789-123456789-123456789-1234"
            - name: GORILLA_GLUE_EXECUTE
              value: "true"
            - name: GORILLA_GLUE_EXECUTE_TASK_NAME
              value: "EXPORTHISTORYTOPARQUET"
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
            - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_STORE
              value: "true"
            - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_CREATE_RUN_TABLES
              value: "true"
            - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_DISABLE_READS
              value: "false"
            - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_FLAT_RUNS_MIGRATOR
              value: "true"
            - name: GORILLA_RUN_STORE_ONPREM_MIGRATE_SHADOW_RUN_UPDATES
              value: "true"
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                add: []
                drop: []
              privileged: false
              readOnlyRootFilesystem: false
            image: "wandb/megabinary:latest"
            imagePullPolicy: IfNotPresent
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
          restartPolicy: Never
          serviceAccountName: chartsnap-parquet
          securityContext: null
          topologySpreadConstraints:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: chartsnap
                app.kubernetes.io/name: parquet
            maxSkew: 1
            topologyKey: topology.kubernetes.io/zone
            whenUnsatisfiable: ScheduleAnyway
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: chartsnap
                app.kubernetes.io/name: parquet
            maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: ScheduleAnyway
---
# Source: operator-wandb/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chartsnap-operator-wandb-test-connection"
  labels:
    helm.sh/chart: operator-wandb-0.33.0
    app.kubernetes.io/name: operator-wandb
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
  - name: wandb-verify
    image: python:3.10
    env:
    - name: WANDB_BASE_URL
      value: "http://chartsnap-app:8080"
    - name: WANDB_API_KEY
      value: "local-123456789-123456789-123456789-1234"
    command:
    - sh
    - -c
    - "pip install wandb==0.19.9 && (timeout=240; start_time=$(date +%s); until wandb verify || [ $(($(date +%s) - start_time)) -gt $timeout ]; do echo 'wandb verify failed, retrying...' && cat /tmp/debug-cli.root.log; sleep 10; done)"
  restartPolicy: Never
