apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wandb.fullname" . }}
  labels:
    {{- include "wandb.labels" . | nindent 4 }}
    app.kubernetes.io/component: local
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "wandb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      labels:
        {{- include "wandb.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: local
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "wandb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if not .Values.mysql.host }}
      - name: init-db
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "wandb.fullname" . }}-secrets
                key: MYSQL_PASSWORD
          - name: DB_HOST
            value: {{ include "wandb.mysqlHost" . }}
          - name: DB_USER
            value: {{ default "wandb_local" .Values.mysql.user }}
          - name: DB
            value: {{ default "wandb_local" .Values.mysql.database }}
        command: ['bash', '-c', "until mysql -h$DB_HOST -u$DB_USER -p$DB_PASSWORD -D$DB --execute=\"SELECT 1\"; do echo waiting for db; sleep 2; done"]
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key:  MYSQL_PASSWORD
            - name: DB_USER
              value: {{ default "wandb_local" .Values.mysql.user }}
            - name: DB
              value: {{ default "wandb_local" .Values.mysql.database }}
            - name: DB_HOST
              value: {{ default (include "wandb.mysqlHost" .) .Values.mysql.host }}
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: LICENSE
            {{- if .Values.sso.enabled }}
            - name: OIDC_ISSUER
              value: {{ .Values.sso.issuer }}
            - name: OIDC_AUTH_METHOD
              value: {{ default "implicit" .Values.sso.method }}
            - name: OIDC_CLIENT_ID
              value: {{ .Values.sso.clientId }}
            {{- if .Values.sso.clientSecret }}
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: CLIENT_SECRET
            {{- end }}
            - name: GORILLA_DISABLE_SSO_PROVISIONING
              value: "{{ not .Values.sso.autoProvision }}"
            {{- end}}
            {{- if .Values.enableAdminApi }}
            - name: GLOBAL_ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: ADMIN_API_KEY
            - name: GORILLA_INSECURE_ALLOW_API_KEY_ADMIN_ACCESS
              value: "true"
            {{- end }}
            - name: WANDB_HELM_CHART
              value: {{ include "wandb.fullname" . }}:{{ .Chart.Version }}
            {{- if .Values.smtpServer }}
            - name: GORILLA_EMAIL_SINK
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: SMTP_SERVER
            {{- end }}
            {{- if .Values.extraCors }}
            - name: GORILLA_CORS_ORIGINS
              value: {{ .Values.extraCors }}
            {{- end }}
            {{- if .Values.bucket }}
            - name: BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: BUCKET
            - name: AWS_REGION
              value: {{ .Values.bucketRegion | default .Release.Namespace }}
            - name: AWS_S3_KMS_ID
              value: {{ .Values.bucketKmsKeyArn }}
            - name: BUCKET_QUEUE
              value: {{ .Values.bucketQueue | default "internal://" }}
            {{- end }}
            - name: MYSQL
              value: {{ "mysql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST)/$(DB)" }}
            - name: HOST
              value: {{ .Values.host | default "http://localhost:8080" }}
            - name: REDIS
              value: {{ .Values.redis | default "redis://127.0.0.1:6379" }}
            {{- if .Values.ldap.enabled }}
            - name: LOCAL_LDAP_LOGIN
              value: "true"
            - name: LOCAL_LDAP_ADDRESS
              value: {{ .Values.ldap.host }}
            - name: LOCAL_LDAP_BASE_DN
              value: {{ .Values.ldap.baseDN }}
            - name: LOCAL_LDAP_BIND_DN
              value: {{ .Values.ldap.bindDN }}
            {{- if .Values.createSecrets }}
            - name: LOCAL_LDAP_BIND_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "wandb.fullname" . }}-secrets
                  key: LOCAL_LDAP_BIND_PW
            {{- else }}
            - name: LOCAL_LDAP_BIND_PW
              value: {{ .Values.ldap.bindPW }}
            {{- end }}
            - name: LOCAL_LDAP_ATTRIBUTES
              value: {{ .Values.ldap.attributes }}
            {{- if .Values.ldap.tls }}
            - name: LOCAL_LDAP_TLS_ENABLE
              value: "true"
            {{- end }}
            - name: LOCAL_LDAP_GROUP_ALLOW_LIST
              value: {{ .Values.ldap.groupAllowList }}
            {{- end }}
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /ready
              port: http
          startupProbe:
            httpGet:
              path: /ready
              port: http
            failureThreshold: 120
          volumeMounts:
          {{- if not .Values.bucket }}
            - name: wandb-data
              mountPath: /vol
              {{- if .Values.subPath }}
              subPath: {{ .Values.subPath }}
              {{- end }}
          {{- end }}
          {{- range $index, $v := .Values.customCACerts }}
            - name: wandb-ca-certs
              mountPath: /usr/local/share/ca-certificates/customCA{{$index}}.crt
              subPath: customCA{{$index}}.crt
          {{- end }}
          {{- if and .Values.ldap.enabled .Values.ldap.tls }}
            - name: ldap-tls-cert
              mountPath: /var/run/secrets/wandb.ai/ldap/ca.crt
              subPath: ca.crt
              readOnly: true
          {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      hostAliases:
      {{- with .Values.hostAliases }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: wandb-data
      {{- if and (not .Values.bucket) .Values.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.existingClaim | default (include "wandb.volumeClaim" .) }}
      {{- else }}
          emptyDir: {}
      {{- end }}
      {{- if .Values.customCACerts }}
        - name: wandb-ca-certs
          configMap:
            name: {{ include "wandb.fullname" . }}-ca-certs
      {{- end }}
      {{- if and .Values.ldap.enabled .Values.ldap.tls }}
        - name: ldap-tls-cert
          configMap:
            name: {{ .Values.ldap.tlsCert.configMap.name }}
            items:
              - key: {{ .Values.ldap.tlsCert.configMap.key }}
                path: ca.crt
      {{- end }}
---
{{- if and (not .Values.bucket) .Values.existingClaim }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "wandb.volumeClaim" . }}
  annotations:
    "helm.sh/resource-policy": keep
  labels:
    {{- include "wandb.labels" . | nindent 4 }}
    app.kubernetes.io/component: local
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi
{{- end }}
