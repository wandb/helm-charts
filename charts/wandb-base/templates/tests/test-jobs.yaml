{{- if and .Values.test.enabled (eq .Values.kind "Job") }}
  {{- range $jobName, $job := .Values.jobs }}
    {{- $job := mergeOverwrite (dict "enabled" true) $job}}
    {{- if $job.enabled }}
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "wandb-base.fullname" $ }}-test-job-{{ $jobName }}"
  labels:
    {{- include "wandb-base.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
spec:
  containers:
    - name: job-test
      image: bitnami/kubectl:latest
      command: ['/bin/sh']
      args:
        - -c
        - |
          set -e
          echo "Testing job: {{ printf "%s-%s" $.Release.Name $jobName }}"
          
          # Wait for the job to exist
          echo "Waiting for job to be created..."
          kubectl wait --for=condition=Ready job/{{ printf "%s-%s" $.Release.Name $jobName }} --timeout=300s || true
          
          # Wait for the job to complete successfully
          echo "Waiting for job to complete successfully..."
          kubectl wait --for=condition=complete job/{{ printf "%s-%s" $.Release.Name $jobName }} --timeout=600s
          
          # Verify the job completed successfully (not failed)
          echo "Verifying job completed successfully..."
          JOB_STATUS=$(kubectl get job {{ printf "%s-%s" $.Release.Name $jobName }} -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')
          if [ "$JOB_STATUS" != "True" ]; then
            echo "Job did not complete successfully. Current status:"
            kubectl describe job {{ printf "%s-%s" $.Release.Name $jobName }}
            exit 1
          fi
          
          echo "Job {{ printf "%s-%s" $.Release.Name $jobName }} completed successfully!"
          
          # Optional: Show job logs for debugging
          echo "Job logs:"
          kubectl logs job/{{ printf "%s-%s" $.Release.Name $jobName }} --tail=50 || echo "No logs available"
  restartPolicy: Never
    {{- end }}
  {{- end }}
{{- end }}
