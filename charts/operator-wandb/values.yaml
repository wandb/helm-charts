## NOTICE
#
# Due to the scope and complexity of this chart, all possible values are not
# documented in this file. Extensive documentation is available.
#
# Because properties are regularly added, updated, or relocated, it is _strongly
# suggest_ to not "copy and paste" this YAML. Please provide Helm only those
# properties you need, and allow the defaults to be provided by the version of
# this chart at the time of deployment.

# The global properties are used to configure multiple charts at once.
global:
  # This should be the fqdn of where your users will be accessing the instance.
  host: "http://localhost:8080"
  license: ""

  licenseSecret:
    name: ""
    key: ""
  # List of image pull secrets for accessing private container registries.
  # Example:
  # imagePullSecrets: &imagePullSecrets
  #   - my-registry-secret
  imagePullSecrets: &imagePullSecrets []

  cloudProvider: ""

  # Rough size of the deployment, in our terms this value comes from terraform, expected values:
  # small, medium, large, xlarge, xxlarge
  size: ""

  storageClass: ""

  banners:
    {}
    # banner1:
    #   type: warning | error | info
    #   message: "This is a warning message"
    #   heading: "This is a warning"
    #   dismissable: true
    # banner2:
    #   type: warning | error | info
    #   message: "This is a warning message"
    #   heading: "This is a warning"

  common:
    labels: {}
    annotations: {}

  ## Supplemental Pod labels. Will not be used for selectors.
  pod:
    labels: {}
    annotations: {}
  deployment:
    annotations:
      reloader.stakater.com/auto: "true"
    labels: {}
  daemonset:
    annotations:
      reloader.stakater.com/auto: "true"
    labels: {}
  statefulset:
    annotations:
      reloader.stakater.com/auto: "true"
    labels: {}
  service:
    labels: {}
    annotations: {}

  extraEnvFrom: {}
  extraEnv:
    BUCKET_QUEUE: internal://

  operator:
    namespace: default

  mysql:
    host: ""
    port: 3306
    database: "wandb_local"
    user: "wandb"
    password: ""
    passwordSecret:
      name: ""
      rootPasswordKey: "MYSQL_ROOT_PASSWORD"
      passwordKey: "MYSQL_PASSWORD"

  slack:
    secret: ""
    clientId: ""

  otel:
    traces:
      # defaults to the otel-daemonset service
      host: ""
      # grpc default is 4317, http default is 4318
      port: 4317
      # grpc, http
      proto: "grpc"

  clickhouse:
    install: false
    host: ""
    port: 8443
    password: "fake"
    passwordSecret:
      name: ""
      passwordKey: "CLICKHOUSE_PASSWORD"
    database: "weave_trace_db"
    user: "default"
    # Required when using replicated services on self-managed ClickHouse (not ClickHouse Cloud).
    # Flag will substitute MergeTree() with ReplicatedMergeTree() and use `ON CLUSTER` on table creation.
    replicated: false

  email:
    smtp:
      host: ""
      port: 587
      user: ""
      password: ""

  auth:
    sessionLengthHours: 720
    # Internal URL for the auth service should be using oidc or auth0
    jwkUrl: ""
    oidc:
      clientId: ""
      secret: ""
      authMethod: ""
      issuer: ""

  # Storage bucket that will be used by the application by default but can be overridden by the user in the wandb-console.
  defaultBucket:
    # az, s3, gcs
    provider: "s3"
    name: ""
    path: ""
    region: ""
    kmsKey: ""

  # If specified the application will use this bucket for all storage operations, and will not be overridable by the user.
  bucket:
    secret:
      secretName: ""
      accessKeyName: "ACCESS_KEY"
      secretKeyName: "SECRET_KEY"

  redis:
    host: ""
    port: 6379
    password: ""
    # external should remain false; it is for W&B internal use only.
    external: false
    parameters: {}
    params: {}
    caCert: ""
    secret:
      secretName: ""
      secretKey: "REDIS_PASSWORD"

  bigtable:
    v3:
      enabled: false
    v2:
      enabled: false
    project: ""
    instance: ""

  pubSub:
    enabled: false
    project: ""
    filestreamTopic: ""
    runUpdateShadowTopic: ""

  kafka:
    # The following values are anchored here, and referenced by alias later for
    # the kafka dependency chart.
    user: &kafkaUser "wandb"
    password: &kafkaPassword "wandb"
    ## The secret can be created using the following command:
    ## "kubectl create secret generic SECRET_NAME --from-literal=client-passwords=CLIENT_PASSWORD1 --from-literal=inter-broker-password=INTER_BROKER_PASSWORD --from-literal=controller-password=CONTROLLER_PASSWORD"
    ## Replace SECRET_NAME, CLIENT_PASSWORD1, INTER_BROKER_PASSWORD, and CONTROLLER_PASSWORD with appropriate values.
    passwordSecret:
      name: &kafkaSecretName ""
      # This (client-passwords) should match the key name used in the secret
      passwordKey: "client-passwords"
    brokerHost: ""
    brokerPort: 9092
    runUpdatesShadowTopic: ""
    # This value will only apply upon initial topic creation.
    # If the topic already exists then changing the number of partitions is not possible.
    runUpdatesShadowNumPartitions: 12

  # To provide custom CA certificates, you can use either:
  # 1. `customCACerts`: a list of certificates provided directly within this Helm chart.
  # 2. `configMapName`: the name of a ConfigMap containing CA certificates.
  #
  # Important:
  # - If using a ConfigMap, each key in the ConfigMap must end with `.crt` (e.g., `my-cert.crt`).
  # - This naming convention is required for `update-ca-certificates` to parse and add each
  #   certificate to the system CA store on Ubuntu-based systems.

  # List of custom CA certificates in PEM format.
  customCACerts: []
  # Name of a ConfigMap containing additional .crt files for CA certificates.
  caCertsConfigMap: ""

  weave-trace:
    enabled: false

  api:
    enabled: false
  glue:
    enabled: false

  beta:
    bufstream:
      enabled: false

  executor:
    enabled: false

  settingsMigrationJob:
    debug: false
    dryRun: true

  # GCP only value: a CloudArmor policy to be attached to the gce LoadBalancer via a BackendConfig.
  # https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-configuration#cloud_armor
  gcpSecurityPolicy: ""

ingress:
  install: true
  create: true
  nameOverride: ""
  defaultBackend: "app"
  annotations: {}
  labels: {}
  tls: []
  additionalHosts: []
  class: ""
  issuer:
    create: false
    provider: ""
    server: https://acme-v02.api.letsencrypt.org/directory
    email: support@wandb.com
  secondary:
    create: false
    install: true
    nameOverride: ""
    defaultBackend: "app"
    annotations: {}
    labels: {}
    tls: []
    additionalHosts: []
    class: ""
    issuer:
      create: false
      provider: ""
      server: https://acme-v02.api.letsencrypt.org/directory
      email: support@wandb.com

parquet:
  install: true
  image:
    repository: wandb/local
    tag: latest
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"

app:
  install: true
  image:
    repository: wandb/local
    tag: latest
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"
    "{{ .Release.Name }}-gorilla-session-key": "secretRef"

nginx:
  install: false

weave:
  install: true
  image:
    repository: wandb/local
    tag: latest

weave-trace:
  install: false
  image:
    repository: wandb/weave-trace
    tag: latest
  datadog:
    enabled: false

console:
  install: true
  image:
    repository: wandb/console
    tag: latest
  proxy:
    httpProxy: ""
    httpsProxy: ""
    noProxy: ""
    debug: false
  extraEnv:
    # This value is used to expose the IAM identity (of the app) to the user in console for
    # adding the correct cross account permissions
    # ex: AWS("arn:aws:iam::{acc_number}:role/{customer_namespace}-node")
    BUCKET_ACCESS_IDENTITY: unknown

flat-run-fields-updater:
  install: false
  deploymentPostfix: "bc"
  service:
    enabled: false
  autoscaling:
    horizontal:
      enabled: false
      maxReplicas: 10
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
  terminationGracePeriodSeconds: 60
  env:
    A_KAFKA_CLIENT_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.kafka.passwordSecret" . }}'
          key: '{{ include "wandb.kafka.passwordSecret.passwordKey" . }}'
          optional: true
    A_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.redis.passwordSecret" . }}'
          key: "{{ .Values.global.redis.secret.secretKey }}"
          optional: true
    AZURE_STORAGE_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_ACCESS_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_SECRET_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).secretKeyName }}'
          optional: true
    A_MYSQL_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.mysql.passwordSecret" . }}'
          key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
    POD_NAME:
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    G_HOST_IP:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE:
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    GORILLA_RUN_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_METADATA_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_PARQUET_LIVE_HISTORY_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_ANALYTICS_SINK:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_HISTORY_STORE:
      value: 'http://{{ .Release.Name }}-parquet:8087/_goRPC_,{{ include "wandb.mysql" . | trim }}'
    GORILLA_METADATA_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    REDIS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_AUDITOR_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_SETTINGS_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_LOCKER:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_ACTIVITY_STORE_CACHE_ADDRESS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_FILE_METADATA_SOURCE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_FRONTEND_HOST:
      value: "{{ .Values.global.host }}"
    GORILLA_FILE_HOST:
      value: "{{ .Values.global.host }}"
    GORILLA_STATIC_HOST:
      value: "{{ .Values.global.host }}"
    GORILLA_TSHIRT_SIZE:
      value: {{ .Values.global.size | quote }}
    OPERATOR_ENABLED:
      value: "true"
    LOGGING_ENABLED:
      value: "true"
    GORILLA_RUN_UPDATE_SHADOW_QUEUE:
      value: >
        {
          "overflow-bucket": {
            "store": {{ (include "wandb.bucket" . | fromYaml).url | quote}},
            "name": "wandb",
            "prefix": "wandb-overflow"
          },
          "subscriptions": {
            "flatRunFieldsUpdater": {{ include "wandb.runUpdateShadowQueue" . | quote }}
          }
        }
    GORILLA_FILE_STORE:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_STORAGE_BUCKET:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_TRACER:
      value: '{{ include "wandb.otelTracesEndpoint" . | trim }}'
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"
    "{{ .Release.Name }}-kafka-configmap": "configMapRef"
    "{{ .Release.Name }}-mysql-configmap": "configMapRef"
    "{{ .Release.Name }}-redis-configmap": "configMapRef"
    "{{ .Release.Name }}-global-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-configmap": "configMapRef"
    "{{ .Release.Name }}-gorilla-session-key": "secretRef"
  containers:
    flat-run-fields-updater:
      args: ["flat-run-fields-updater"]
      volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
  image:
    repository: wandb/megabinary
    tag: latest
  resources:
    limits:
      cpu: "2"
      memory: 4Gi
    requests:
      cpu: "1"
      memory: 1Gi
  volumes:
    - name: wandb-ca-certs
      configMap:
        name: "{{ .Release.Name }}-ca-certs"
    - name: wandb-ca-certs-user
      configMap:
        name: '{{ .Values.global.caCertsConfigMap | default "noCertProvided" }}'
        optional: true
    - name: redis-ca
      secret:
        secretName: '{{ include "wandb.redis.passwordSecret" . }}'
        items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
        optional: true

filestream:
  install: false
  image:
    repository: wandb/local
    tag: latest
  pubSub:
    subscription: ""
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"

executor:
  install: false
  image:
    repository: wandb/local
    tag: latest
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"

mysql:
  install: false
  persistence:
    size: 20Gi
    storageClass: ""

yace:
  install: false
  regions: ["ap-south-1"]
  pod:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "5000"
      prometheus.io/path: "/metrics"
      prometheus.io/scheme: http

redis:
  install: true
  nameOverride: "redis"
  architecture: standalone
  auth:
    enabled: false
    existingSecret: '{{ include "wandb.redis.passwordSecret" . }}'
    existingSecretPasswordKey: "{{ .Values.global.redis.secret.secretKey }}"
  metrics:
    enabled: false
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

prometheus:
  install: true

  instance:
    install: true

  redis-exporter:
    install: true

  mysql-exporter:
    install: true

stackdriver:
  install: false
  pod:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9255"
      prometheus.io/path: "/metrics"
      prometheus.io/scheme: http

otel:
  install: true

  # Consider deploying with a deployment rather than a daemonset to avoid
  # redundant metrics. In setups where both are scraping the same endpoints,
  # this redundancy occurs as both scrape the same points.
  daemonset:
    install: true

  # By default, we use only the daemonset which, along with the Prometheus
  # receiver, gathers most necessary metrics.
  # - To forward Kafka metrics to an external system, you will need to scrape a
  #   promethus endpoint which causes duplicated metrics that get repoted.
  deployment:
    install: false

#   # cannot use install because schema validation will fail.
#   enabled: true

#   resources:
#     limits:
#       cpu: 100m
#       memory: 200M
#   configMap:
#     create: false

#   command:
#     name: otelcol-contrib
#     extraArgs: ["--config=/conf/config.yaml"]
#   extraVolumes:
#     - name: "otel-config"
#       configMap:
#         name: "otel-config"
#         items:
#           - key: config
#             path: config.yaml
#         defaultMode: 420
#   extraVolumeMounts:
#     - name: "otel-config"
#       mountPath: /conf/config.yaml

nameOverride: ""
fullnameOverride: ""

# It is *strongly* recommended to supply passwords yourself for production installs.
kafka:
  install: false
  controller:
    persistence:
      size: 30Gi
  sasl:
    interbroker:
      password: "inter-broker"
    controller:
      password: "controller-pw"
    # The client usernames and passwords are alias references from the global values section at the beginning of this file.
    # Please update the values there to ensure proper propagation to the application
    client:
      users:
        - *kafkaUser
      passwords: *kafkaPassword
    existingSecret: *kafkaSecretName

  kraft:
    # This field is a UUID. It is *strongly* recommended to supply a new UUID yourself for production installs.
    clusterId: "ffFF1H3AQKGdBnsqAbJKew"
  metrics:
    jmx:
      enabled: true

etcd:
  replicaCount: 3
  persistence:
    enabled: true
    size: 10Gi
  autoCompactionMode: periodic
  autoCompactionRetention: 30s
  removeMemberOnContainerTermination: false
  resourcesPreset: none
  auth:
    rbac:
      create: false
      enabled: false
    token:
      enabled: false
  metrics:
    useSeparateEndpoint: true
  customLivenessProbe:
    httpGet:
      port: 9090
      path: /livez
      scheme: "HTTP"
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 15
    failureThreshold: 10
  customReadinessProbe:
    httpGet:
      port: 9090
      path: /readyz
      scheme: "HTTP"
    initialDelaySeconds: 20
    timeoutSeconds: 10
  extraEnvVars:
    - name: ETCD_LISTEN_CLIENT_HTTP_URLS
      value: "http://0.0.0.0:8080"

bufstream:
  install: false
  storage:
    use: '{{ (include "wandb.bucket" . | fromYaml).provider }}'
    gcs:
      bucket: '{{ include "wandb.bufstream.bucket.name" . }}'
    s3:
      bucket: '{{ include "wandb.bufstream.bucket.name" . }}'
      accessKeyId: '{{ (include "wandb.bucket" . | fromYaml).accessKey }}'
      secretName: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
      secretKeyName: '{{ (include "wandb.bucket" . | fromYaml).secretKeyName }}'
      region: '{{ (include "wandb.bucket" . | fromYaml).region }}'
      endpoint: '{{ include "wandb.bufstream.bucket.endpoint" . }}'
  metadata:
    use: etcd
    etcd:
      addresses:
        - host: '{{ .Release.Name }}-etcd.{{ .Release.Namespace }}.svc.cluster.local'
          port: 2379
  bufstream:
    deployment:
      resources:
        requests:
          cpu: '1'
          memory: 4Gi

glue:
  # install: false
  imagePullSecrets: *imagePullSecrets
  service:
    enabled: false
  env:
    A_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.redis.passwordSecret" . }}'
          key: "{{ .Values.global.redis.secret.secretKey }}"
          optional: true
    AZURE_STORAGE_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_ACCESS_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_SECRET_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).secretKeyName }}'
          optional: true
    A_MYSQL_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.mysql.passwordSecret" . }}'
          key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
    GORILLA_FRONTEND_HOST:
      value: "{{ .Values.global.host }}"
    GORILLA_LICENSE_CERT_PATH:
      value: "/jwks.json"
    REDIS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_AUDITOR_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_SETTINGS_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_LOCKER:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_ACTIVITY_STORE_CACHE_ADDRESS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_FILE_METADATA_SOURCE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_TASK_QUEUE:
      value: '{{ include "wandb.redis.taskQueue" . | trim }}'
    GORILLA_GLUE_TASK_STRATEGY_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_GLUE_TASK_METADATA_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_USAGE_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_METADATA_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_PARQUET_LIVE_HISTORY_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_ANALYTICS_SINK:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_CASBIN_ADDRESS:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_RUN_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_TRACER:
      value: '{{ include "wandb.otelTracesEndpoint" . | trim }}'
    GORILLA_FILE_STREAM_STORE_ADDRESS:
      value: '{{ include "wandb.fileStreamStoreProducer" . }}'
    GORILLA_HISTORY_STORE:
      value: '{{ include "wandb.historyStore" . }}'
    GORILLA_FILE_STORE:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_STORAGE_BUCKET:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_TSHIRT_SIZE:
      value: '{{ .Values.global.size }}'
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"
    "{{ .Release.Name }}-mysql-configmap": "configMapRef"
    "{{ .Release.Name }}-redis-configmap": "configMapRef"
    "{{ .Release.Name }}-global-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-configmap": "configMapRef"
    "{{ .Release.Name }}-glue-secret": "secretRef"
    "{{ .Release.Name }}-glue-configmap": "configMapRef"
    "{{ .Release.Name }}-gorilla-session-key": "secretRef"
  initContainers:
    init-db:
      image:
        repository: wandb/local
        tag: latest
      env:
        MYSQL_HOST:
          value: '{{ include "wandb.mysql.host" . }}'
        MYSQL_DATABASE:
          value: '{{ include "wandb.mysql.database" . }}'
        MYSQL_USER:
          value: '{{ include "wandb.mysql.user" . }}'
        MYSQL_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: '{{ include "wandb.mysql.passwordSecret" . }}'
              key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
      command:
        [
          "bash",
          "-c",
          'until mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done',
        ]
    migrate-db:
      env:
        MYSQL_HOST:
          value: '{{ include "wandb.mysql.host" . }}'
        MYSQL_DATABASE:
          value: '{{ include "wandb.mysql.database" . }}'
        MYSQL_USER:
          value: '{{ include "wandb.mysql.user" . }}'
        MYSQL_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: '{{ include "wandb.mysql.passwordSecret" . }}'
              key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
      command:
        [
          "bash",
          "-c",
          "./megabinary migrate --db=$GORILLA_METADATA_STORE --runs-db=$GORILLA_RUN_STORE || true; ./megabinary migrate --db=$GORILLA_METADATA_STORE --usage-db=$GORILLA_USAGE_STORE || true",
        ]
  containers:
    glue:
      args: ["glue"]
      env: {}
      envFrom: {}
      ports:
        - name: http
          containerPort: 8080
          protocol: TCP
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 1
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      resources:
        limits:
          cpu: "2"
          memory: 4Gi
        requests:
          cpu: "1"
          memory: 1Gi
      volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
  image:
    repository: wandb/megabinary
    tag: latest
  volumes:
    - name: wandb-ca-certs
      configMap:
        name: "{{ .Release.Name }}-ca-certs"
    - name: wandb-ca-certs-user
      configMap:
        name: '{{ .Values.global.caCertsConfigMap | default "noCertProvided" }}'
        optional: true
    - name: redis-ca
      secret:
        secretName: '{{ include "wandb.redis.passwordSecret" . }}'
        items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
        optional: true

api:
  install: false
  autoscaling:
    horizontal:
      enabled: true
      maxReplicas: 3
      minReplicas: 2
  imagePullSecrets: *imagePullSecrets
  service:
    enabled: true
    loadBalancerHealthCheckPath: "/ready"
    type: ClusterIP
    ports:
      - port: 8081
        targetPort: api
        protocol: TCP
        name: http
  env:
    A_REDIS_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.redis.passwordSecret" . }}'
          key: "{{ .Values.global.redis.secret.secretKey }}"
          optional: true
    AZURE_STORAGE_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_ACCESS_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_SECRET_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).secretKeyName }}'
          optional: true
    A_MYSQL_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.mysql.passwordSecret" . }}'
          key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
    A_KAFKA_CLIENT_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "wandb.kafka.passwordSecret" . }}'
          key: '{{ include "wandb.kafka.passwordSecret.passwordKey" . }}'
          optional: true
    GORILLA_FRONTEND_HOST:
      value: "{{ .Values.global.host }}"
    GORILLA_LICENSE_CERT_PATH:
      value: "/jwks.json"
    REDIS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_AUDITOR_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_SETTINGS_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_LOCKER:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_ACTIVITY_STORE_CACHE_ADDRESS:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_CACHE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_FILE_METADATA_SOURCE:
      value: '{{ include "wandb.redis.connectionString" . | trim }}'
    GORILLA_TASK_QUEUE:
      value: '{{ include "wandb.redis.taskQueue" . | trim }}'
    GORILLA_GLUE_TASK_STRATEGY_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_GLUE_TASK_METADATA_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_TSHIRT_SIZE:
      value: '{{ .Values.global.size }}'
    GORILLA_USAGE_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_METADATA_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_PARQUET_LIVE_HISTORY_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_ANALYTICS_SINK:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_CASBIN_ADDRESS:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_RUN_STORE:
      value: '{{ include "wandb.mysql" . | trim }}'
    GORILLA_TRACER:
      value: '{{ include "wandb.otelTracesEndpoint" . | trim }}'
    GORILLA_FILE_STREAM_STORE_ADDRESS:
      value: '{{ include "wandb.fileStreamStoreProducer" . }}'
    GORILLA_HISTORY_STORE:
      value: '{{ include "wandb.historyStore" . }}'
    GORILLA_FILE_STORE:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_STORAGE_BUCKET:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    GORILLA_CUSTOMER_SECRET_STORE_K8S_CONFIG_NAMESPACE:
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    GORILLA_RUN_UPDATE_SHADOW_QUEUE:
      value: >
        {
          "overflow-bucket": {
            "store": {{ (include "wandb.bucket" . | fromYaml).url | quote}},
            "name": "wandb",
            "prefix": "wandb-overflow"
          },
          "addr": {{ include "wandb.runUpdateShadowTopicProducer" . | quote }}
        }
    GORILLA_PORT:
      value: "8081"
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"
    "{{ .Release.Name }}-mysql-configmap": "configMapRef"
    "{{ .Release.Name }}-redis-configmap": "configMapRef"
    "{{ .Release.Name }}-kafka-configmap": "configMapRef"
    "{{ .Release.Name }}-global-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-secret": "secretRef"
    "{{ .Release.Name }}-gorilla-configmap": "configMapRef"
    "{{ .Release.Name }}-gorilla-session-key": "secretRef"
  initContainers:
    init-db:
      image:
        repository: wandb/local
        tag: latest
      env:
        MYSQL_HOST:
          value: '{{ include "wandb.mysql.host" . }}'
        MYSQL_DATABASE:
          value: '{{ include "wandb.mysql.database" . }}'
        MYSQL_USER:
          value: '{{ include "wandb.mysql.user" . }}'
        MYSQL_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: '{{ include "wandb.mysql.passwordSecret" . }}'
              key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
      command:
        [
          "bash",
          "-c",
          'until mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -D$MYSQL_DATABASE -P$MYSQL_PORT --execute="SELECT 1"; do echo waiting for db; sleep 2; done',
        ]
    migrate-db:
      env:
        MYSQL_HOST:
          value: '{{ include "wandb.mysql.host" . }}'
        MYSQL_DATABASE:
          value: '{{ include "wandb.mysql.database" . }}'
        MYSQL_USER:
          value: '{{ include "wandb.mysql.user" . }}'
        MYSQL_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: '{{ include "wandb.mysql.passwordSecret" . }}'
              key: "{{ .Values.global.mysql.passwordSecret.passwordKey }}"
      command:
        [
          "bash",
          "-c",
          "./megabinary migrate --db=$GORILLA_METADATA_STORE --runs-db=$GORILLA_RUN_STORE || true; ./megabinary migrate --db=$GORILLA_METADATA_STORE --usage-db=$GORILLA_USAGE_STORE || true",
        ]
  containers:
    api:
      args: ["gorilla"]
      env: {}
      envFrom: {}
      ports:
        - name: api
          containerPort: 8081
          protocol: TCP
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8081
        initialDelaySeconds: 30
        periodSeconds: 5
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      readinessProbe:
        httpGet:
          path: /ready
          port: api
        periodSeconds: 5
        successThreshold: 1
        failureThreshold: 5
      resources:
        limits:
          cpu: "4"
          memory: 8Gi
        requests:
          cpu: 500m
          memory: 1Gi
      volumeMounts:
        - name: wandb-ca-certs
          mountPath: /usr/local/share/ca-certificates/inline
        - name: wandb-ca-certs-user
          mountPath: /usr/local/share/ca-certificates/configmap
        - name: redis-ca
          mountPath: /etc/ssl/certs/redis_ca.pem
          subPath: redis_ca.pem
  image:
    repository: wandb/megabinary
    tag: latest
  volumes:
    - name: wandb-ca-certs
      configMap:
        name: "{{ .Release.Name }}-ca-certs"
    - name: wandb-ca-certs-user
      configMap:
        name: '{{ .Values.global.caCertsConfigMap | default "noCertProvided" }}'
        optional: true
    - name: redis-ca
      secret:
        secretName: '{{ include "wandb.redis.passwordSecret" . }}'
        items:
          - key: REDIS_CA_CERT
            path: redis_ca.pem
        optional: true

settingsMigrationJob:
  install: false
  imagePullSecrets: *imagePullSecrets
  service:
    enabled: false
  role:
    create: true
    rules:
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - create
          - list
          - update
          - patch
  env:
    AZURE_STORAGE_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_ACCESS_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).accessKeyName }}'
          optional: true
    BUCKET_SECRET_KEY:
      valueFrom:
        secretKeyRef:
          name: '{{ (include "wandb.bucket" . | fromYaml).secretName }}'
          key: '{{ (include "wandb.bucket" . | fromYaml).secretKeyName }}'
          optional: true
    SMJ_FILE_STORE:
      value: '{{ (include "wandb.bucket" . | fromYaml).url }}'
    SMJ_K8S_ACTIVE_SPEC_SECRET_NAME:
      value: "wandb-spec-active"
    SMJ_K8S_USER_SPEC_SECRET_NAME:
      value: "wandb-spec-user"
    SMJ_K8S_NAMESPACE:
      value: "default"
  envFrom:
    "{{ .Release.Name }}-bucket-configmap": "configMapRef"
  kind: Job
  jobs:
    smj:
      ttlSecondsAfterFinished: 60
      backoffLimit: 1
      containers:
        smj:
          image:
            repository: wandb/megabinary
            tag: latest
          envFrom:
            "{{ .Release.Name }}-smj-secret": "secretRef"
          args: ["settings-migration-job"]

reloader:
  install: false
  reloader:
    # deployment:
    #   image:
    #     repository: ghcr.io/stakater/reloader
    #     tag: v1.3.0
    watchGlobally: false
    reloadOnCreate: true
    reloadOnDelete: true
